/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvaluationRun,
  EvaluationRun$inboundSchema,
  EvaluationRun$Outbound,
  EvaluationRun$outboundSchema,
} from "./evaluationrun.js";

export type GetRunsResponse = {
  evaluations?: Array<EvaluationRun> | undefined;
};

/** @internal */
export const GetRunsResponse$inboundSchema: z.ZodType<
  GetRunsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  evaluations: z.array(EvaluationRun$inboundSchema).optional(),
});

/** @internal */
export type GetRunsResponse$Outbound = {
  evaluations?: Array<EvaluationRun$Outbound> | undefined;
};

/** @internal */
export const GetRunsResponse$outboundSchema: z.ZodType<
  GetRunsResponse$Outbound,
  z.ZodTypeDef,
  GetRunsResponse
> = z.object({
  evaluations: z.array(EvaluationRun$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunsResponse$ {
  /** @deprecated use `GetRunsResponse$inboundSchema` instead. */
  export const inboundSchema = GetRunsResponse$inboundSchema;
  /** @deprecated use `GetRunsResponse$outboundSchema` instead. */
  export const outboundSchema = GetRunsResponse$outboundSchema;
  /** @deprecated use `GetRunsResponse$Outbound` instead. */
  export type Outbound = GetRunsResponse$Outbound;
}

export function getRunsResponseToJSON(
  getRunsResponse: GetRunsResponse,
): string {
  return JSON.stringify(GetRunsResponse$outboundSchema.parse(getRunsResponse));
}

export function getRunsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRunsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRunsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRunsResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Specify whether the event is of "session", "model", "tool" or "chain" type
 */
export const EventType = {
    Session: "session",
    Model: "model",
    Tool: "tool",
    Chain: "chain",
} as const;
/**
 * Specify whether the event is of "session", "model", "tool" or "chain" type
 */
export type EventType = ClosedEnum<typeof EventType>;

export type Event = {
    /**
     * Name of project associated with the event
     */
    projectId?: string | undefined;
    /**
     * Source of the event - production, staging, etc
     */
    source?: string | undefined;
    /**
     * Name of the event
     */
    eventName?: string | undefined;
    /**
     * Specify whether the event is of "session", "model", "tool" or "chain" type
     */
    eventType?: EventType | undefined;
    /**
     * Unique id of the event, if not set, it will be auto-generated
     */
    eventId?: string | undefined;
    /**
     * Unique id of the session associated with the event, if not set, it will be auto-generated
     */
    sessionId?: string | undefined;
    /**
     * Id of the parent event if nested
     */
    parentId?: string | undefined;
    /**
     * Id of events that are nested within the event
     */
    childrenIds?: Array<string> | undefined;
    /**
     * Associated configuration JSON for the event - model name, vector index name, etc
     */
    config?: { [k: string]: any } | undefined;
    /**
     * Input JSON given to the event - prompt, chunks, etc
     */
    inputs?: { [k: string]: any } | undefined;
    /**
     * Final output JSON of the event
     */
    outputs?: { [k: string]: any } | undefined;
    /**
     * Any error description if event failed
     */
    error?: string | undefined;
    /**
     * UTC timestamp (in milliseconds) for the event start
     */
    startTime?: number | undefined;
    /**
     * UTC timestamp (in milliseconds) for the event end
     */
    endTime?: number | undefined;
    /**
     * How long the event took in milliseconds
     */
    duration?: number | undefined;
    /**
     * Any system or application metadata associated with the event
     */
    metadata?: { [k: string]: any } | undefined;
    /**
     * Any user feedback provided for the event output
     */
    feedback?: { [k: string]: any } | undefined;
    /**
     * Any values computed over the output of the event
     */
    metrics?: { [k: string]: any } | undefined;
    /**
     * Any user properties associated with the event
     */
    userProperties?: { [k: string]: any } | undefined;
};

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z.nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> = EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
    /** @deprecated use `EventType$inboundSchema` instead. */
    export const inboundSchema = EventType$inboundSchema;
    /** @deprecated use `EventType$outboundSchema` instead. */
    export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
    .object({
        project_id: z.string().optional(),
        source: z.string().optional(),
        event_name: z.string().optional(),
        event_type: EventType$inboundSchema.optional(),
        event_id: z.string().optional(),
        session_id: z.string().optional(),
        parent_id: z.string().optional(),
        children_ids: z.array(z.string()).optional(),
        config: z.record(z.any()).optional(),
        inputs: z.record(z.any()).optional(),
        outputs: z.record(z.any()).optional(),
        error: z.string().optional(),
        start_time: z.number().optional(),
        end_time: z.number().int().optional(),
        duration: z.number().optional(),
        metadata: z.record(z.any()).optional(),
        feedback: z.record(z.any()).optional(),
        metrics: z.record(z.any()).optional(),
        user_properties: z.record(z.any()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            project_id: "projectId",
            event_name: "eventName",
            event_type: "eventType",
            event_id: "eventId",
            session_id: "sessionId",
            parent_id: "parentId",
            children_ids: "childrenIds",
            start_time: "startTime",
            end_time: "endTime",
            user_properties: "userProperties",
        });
    });

/** @internal */
export type Event$Outbound = {
    project_id?: string | undefined;
    source?: string | undefined;
    event_name?: string | undefined;
    event_type?: string | undefined;
    event_id?: string | undefined;
    session_id?: string | undefined;
    parent_id?: string | undefined;
    children_ids?: Array<string> | undefined;
    config?: { [k: string]: any } | undefined;
    inputs?: { [k: string]: any } | undefined;
    outputs?: { [k: string]: any } | undefined;
    error?: string | undefined;
    start_time?: number | undefined;
    end_time?: number | undefined;
    duration?: number | undefined;
    metadata?: { [k: string]: any } | undefined;
    feedback?: { [k: string]: any } | undefined;
    metrics?: { [k: string]: any } | undefined;
    user_properties?: { [k: string]: any } | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<Event$Outbound, z.ZodTypeDef, Event> = z
    .object({
        projectId: z.string().optional(),
        source: z.string().optional(),
        eventName: z.string().optional(),
        eventType: EventType$outboundSchema.optional(),
        eventId: z.string().optional(),
        sessionId: z.string().optional(),
        parentId: z.string().optional(),
        childrenIds: z.array(z.string()).optional(),
        config: z.record(z.any()).optional(),
        inputs: z.record(z.any()).optional(),
        outputs: z.record(z.any()).optional(),
        error: z.string().optional(),
        startTime: z.number().optional(),
        endTime: z.number().int().optional(),
        duration: z.number().optional(),
        metadata: z.record(z.any()).optional(),
        feedback: z.record(z.any()).optional(),
        metrics: z.record(z.any()).optional(),
        userProperties: z.record(z.any()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            projectId: "project_id",
            eventName: "event_name",
            eventType: "event_type",
            eventId: "event_id",
            sessionId: "session_id",
            parentId: "parent_id",
            childrenIds: "children_ids",
            startTime: "start_time",
            endTime: "end_time",
            userProperties: "user_properties",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
    /** @deprecated use `Event$inboundSchema` instead. */
    export const inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    export const outboundSchema = Event$outboundSchema;
    /** @deprecated use `Event$Outbound` instead. */
    export type Outbound = Event$Outbound;
}

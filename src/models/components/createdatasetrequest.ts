/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Any helpful metadata to track for the dataset
 */
export class CreateDatasetRequestMetadata extends SpeakeasyBase {}

/**
 * The type of data included in the dataset - "event" or "session"
 */
export enum PipelineType {
    Event = "event",
    Session = "session",
}

/**
 * What the dataset is to be used for - "evaluation" or "fine-tuning"
 */
export enum CreateDatasetRequestType {
    Evaluation = "evaluation",
    FineTuning = "fine-tuning",
}

export class CreateDatasetRequest extends SpeakeasyBase {
    /**
     * List of unique datapoint ids to be included in this dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "datapoints" })
    datapoints?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * List of unique evaluation run ids to be associated with this dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "linked_evals" })
    linkedEvals?: string[];

    /**
     * Any helpful metadata to track for the dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => CreateDatasetRequestMetadata)
    metadata?: CreateDatasetRequestMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * The type of data included in the dataset - "event" or "session"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pipeline_type" })
    pipelineType?: PipelineType;

    /**
     * UUID of the project associated with this dataset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "project" })
    project: string;

    @SpeakeasyMetadata()
    @Expose({ name: "saved" })
    saved?: boolean;

    /**
     * What the dataset is to be used for - "evaluation" or "fine-tuning"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: CreateDatasetRequestType;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * What the dataset is to be used for - "evaluation" (default) or "fine-tuning"
 */
export const CreateDatasetRequestType = {
  Evaluation: "evaluation",
  FineTuning: "fine-tuning",
} as const;
/**
 * What the dataset is to be used for - "evaluation" (default) or "fine-tuning"
 */
export type CreateDatasetRequestType = ClosedEnum<
  typeof CreateDatasetRequestType
>;

/**
 * The type of data included in the dataset - "event" (default) or "session"
 */
export const CreateDatasetRequestPipelineType = {
  Event: "event",
  Session: "session",
} as const;
/**
 * The type of data included in the dataset - "event" (default) or "session"
 */
export type CreateDatasetRequestPipelineType = ClosedEnum<
  typeof CreateDatasetRequestPipelineType
>;

export type CreateDatasetRequest = {
  /**
   * Name of the project associated with this dataset like `New Project`
   */
  project: string;
  /**
   * Name of the dataset
   */
  name: string;
  /**
   * A description for the dataset
   */
  description?: string | undefined;
  /**
   * What the dataset is to be used for - "evaluation" (default) or "fine-tuning"
   */
  type?: CreateDatasetRequestType | undefined;
  /**
   * List of unique datapoint ids to be included in this dataset
   */
  datapoints?: Array<string> | undefined;
  /**
   * List of unique evaluation run ids to be associated with this dataset
   */
  linkedEvals?: Array<string> | undefined;
  saved?: boolean | undefined;
  /**
   * The type of data included in the dataset - "event" (default) or "session"
   */
  pipelineType?: CreateDatasetRequestPipelineType | undefined;
  /**
   * Any helpful metadata to track for the dataset
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateDatasetRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetRequestType
> = z.nativeEnum(CreateDatasetRequestType);

/** @internal */
export const CreateDatasetRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetRequestType
> = CreateDatasetRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetRequestType$ {
  /** @deprecated use `CreateDatasetRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetRequestType$inboundSchema;
  /** @deprecated use `CreateDatasetRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetRequestType$outboundSchema;
}

/** @internal */
export const CreateDatasetRequestPipelineType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetRequestPipelineType
> = z.nativeEnum(CreateDatasetRequestPipelineType);

/** @internal */
export const CreateDatasetRequestPipelineType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetRequestPipelineType
> = CreateDatasetRequestPipelineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetRequestPipelineType$ {
  /** @deprecated use `CreateDatasetRequestPipelineType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetRequestPipelineType$inboundSchema;
  /** @deprecated use `CreateDatasetRequestPipelineType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetRequestPipelineType$outboundSchema;
}

/** @internal */
export const CreateDatasetRequest$inboundSchema: z.ZodType<
  CreateDatasetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  name: z.string(),
  description: z.string().optional(),
  type: CreateDatasetRequestType$inboundSchema.optional(),
  datapoints: z.array(z.string()).optional(),
  linked_evals: z.array(z.string()).optional(),
  saved: z.boolean().optional(),
  pipeline_type: CreateDatasetRequestPipelineType$inboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "linked_evals": "linkedEvals",
    "pipeline_type": "pipelineType",
  });
});

/** @internal */
export type CreateDatasetRequest$Outbound = {
  project: string;
  name: string;
  description?: string | undefined;
  type?: string | undefined;
  datapoints?: Array<string> | undefined;
  linked_evals?: Array<string> | undefined;
  saved?: boolean | undefined;
  pipeline_type?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateDatasetRequest$outboundSchema: z.ZodType<
  CreateDatasetRequest$Outbound,
  z.ZodTypeDef,
  CreateDatasetRequest
> = z.object({
  project: z.string(),
  name: z.string(),
  description: z.string().optional(),
  type: CreateDatasetRequestType$outboundSchema.optional(),
  datapoints: z.array(z.string()).optional(),
  linkedEvals: z.array(z.string()).optional(),
  saved: z.boolean().optional(),
  pipelineType: CreateDatasetRequestPipelineType$outboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    linkedEvals: "linked_evals",
    pipelineType: "pipeline_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetRequest$ {
  /** @deprecated use `CreateDatasetRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetRequest$inboundSchema;
  /** @deprecated use `CreateDatasetRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetRequest$outboundSchema;
  /** @deprecated use `CreateDatasetRequest$Outbound` instead. */
  export type Outbound = CreateDatasetRequest$Outbound;
}

export function createDatasetRequestToJSON(
  createDatasetRequest: CreateDatasetRequest,
): string {
  return JSON.stringify(
    CreateDatasetRequest$outboundSchema.parse(createDatasetRequest),
  );
}

export function createDatasetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionPropertiesBatch = {
  /**
   * Name of the session
   */
  sessionName?: string | undefined;
  /**
   * Source of the session - production, staging, etc
   */
  source?: string | undefined;
  /**
   * Unique id of the session, if not set, it will be auto-generated
   */
  sessionId?: string | undefined;
  /**
   * Associated configuration for the session
   */
  config?: { [k: string]: any } | undefined;
  /**
   * Input object passed to the session - user query, text blob, etc
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * Final output of the session - completion, chunks, etc
   */
  outputs?: { [k: string]: any } | undefined;
  /**
   * Any error description if session failed
   */
  error?: string | undefined;
  /**
   * Any user properties associated with the session
   */
  userProperties?: { [k: string]: any } | undefined;
  /**
   * Any values computed over the output of the session
   */
  metrics?: { [k: string]: any } | undefined;
  /**
   * Any user feedback provided for the session output
   */
  feedback?: { [k: string]: any } | undefined;
  /**
   * Any system or application metadata associated with the session
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const SessionPropertiesBatch$inboundSchema: z.ZodType<
  SessionPropertiesBatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_name: z.string().optional(),
  source: z.string().optional(),
  session_id: z.string().optional(),
  config: z.record(z.any()).optional(),
  inputs: z.record(z.any()).optional(),
  outputs: z.record(z.any()).optional(),
  error: z.string().optional(),
  user_properties: z.record(z.any()).optional(),
  metrics: z.record(z.any()).optional(),
  feedback: z.record(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "session_name": "sessionName",
    "session_id": "sessionId",
    "user_properties": "userProperties",
  });
});

/** @internal */
export type SessionPropertiesBatch$Outbound = {
  session_name?: string | undefined;
  source?: string | undefined;
  session_id?: string | undefined;
  config?: { [k: string]: any } | undefined;
  inputs?: { [k: string]: any } | undefined;
  outputs?: { [k: string]: any } | undefined;
  error?: string | undefined;
  user_properties?: { [k: string]: any } | undefined;
  metrics?: { [k: string]: any } | undefined;
  feedback?: { [k: string]: any } | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const SessionPropertiesBatch$outboundSchema: z.ZodType<
  SessionPropertiesBatch$Outbound,
  z.ZodTypeDef,
  SessionPropertiesBatch
> = z.object({
  sessionName: z.string().optional(),
  source: z.string().optional(),
  sessionId: z.string().optional(),
  config: z.record(z.any()).optional(),
  inputs: z.record(z.any()).optional(),
  outputs: z.record(z.any()).optional(),
  error: z.string().optional(),
  userProperties: z.record(z.any()).optional(),
  metrics: z.record(z.any()).optional(),
  feedback: z.record(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionName: "session_name",
    sessionId: "session_id",
    userProperties: "user_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionPropertiesBatch$ {
  /** @deprecated use `SessionPropertiesBatch$inboundSchema` instead. */
  export const inboundSchema = SessionPropertiesBatch$inboundSchema;
  /** @deprecated use `SessionPropertiesBatch$outboundSchema` instead. */
  export const outboundSchema = SessionPropertiesBatch$outboundSchema;
  /** @deprecated use `SessionPropertiesBatch$Outbound` instead. */
  export type Outbound = SessionPropertiesBatch$Outbound;
}

export function sessionPropertiesBatchToJSON(
  sessionPropertiesBatch: SessionPropertiesBatch,
): string {
  return JSON.stringify(
    SessionPropertiesBatch$outboundSchema.parse(sessionPropertiesBatch),
  );
}

export function sessionPropertiesBatchFromJSON(
  jsonString: string,
): SafeParseResult<SessionPropertiesBatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionPropertiesBatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionPropertiesBatch' from JSON`,
  );
}

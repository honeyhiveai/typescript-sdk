/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ToolType = {
    Function: "function",
    Tool: "tool",
} as const;
export type ToolType = ClosedEnum<typeof ToolType>;

export type Tool = {
    id?: string | undefined;
    /**
     * Name of the project associated with this tool
     */
    task: string;
    name: string;
    description?: string | undefined;
    /**
     * These can be function call params or plugin call params
     */
    parameters: { [k: string]: any };
    toolType: ToolType;
};

/** @internal */
export const ToolType$inboundSchema: z.ZodNativeEnum<typeof ToolType> = z.nativeEnum(ToolType);

/** @internal */
export const ToolType$outboundSchema: z.ZodNativeEnum<typeof ToolType> = ToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolType$ {
    /** @deprecated use `ToolType$inboundSchema` instead. */
    export const inboundSchema = ToolType$inboundSchema;
    /** @deprecated use `ToolType$outboundSchema` instead. */
    export const outboundSchema = ToolType$outboundSchema;
}

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
    .object({
        _id: z.string().optional(),
        task: z.string(),
        name: z.string(),
        description: z.string().optional(),
        parameters: z.record(z.any()),
        tool_type: ToolType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            _id: "id",
            tool_type: "toolType",
        });
    });

/** @internal */
export type Tool$Outbound = {
    _id?: string | undefined;
    task: string;
    name: string;
    description?: string | undefined;
    parameters: { [k: string]: any };
    tool_type: string;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> = z
    .object({
        id: z.string().optional(),
        task: z.string(),
        name: z.string(),
        description: z.string().optional(),
        parameters: z.record(z.any()),
        toolType: ToolType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            id: "_id",
            toolType: "tool_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
    /** @deprecated use `Tool$inboundSchema` instead. */
    export const inboundSchema = Tool$inboundSchema;
    /** @deprecated use `Tool$outboundSchema` instead. */
    export const outboundSchema = Tool$outboundSchema;
    /** @deprecated use `Tool$Outbound` instead. */
    export type Outbound = Tool$Outbound;
}

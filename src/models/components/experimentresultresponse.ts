/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Values = number | boolean;

export type ExperimentResultResponseDatapoints = {
  passed?: Array<string> | undefined;
  failed?: Array<string> | undefined;
};

export type Details = {
  metricName?: string | undefined;
  metricType?: string | undefined;
  eventName?: string | undefined;
  eventType?: string | undefined;
  aggregate?: number | undefined;
  values?: Array<number | boolean> | undefined;
  datapoints?: ExperimentResultResponseDatapoints | undefined;
};

export type Metrics = {
  aggregationFunction?: string | undefined;
  details?: Array<Details> | undefined;
};

export type Value = number | boolean;

export type ExperimentResultResponseMetrics = {
  name?: string | undefined;
  eventName?: string | undefined;
  eventType?: string | undefined;
  value?: number | boolean | undefined;
  passed?: boolean | undefined;
};

export type Datapoints = {
  datapointId?: string | undefined;
  sessionId?: string | undefined;
  passed?: boolean | undefined;
  metrics?: Array<ExperimentResultResponseMetrics> | undefined;
};

export type ExperimentResultResponse = {
  status?: string | undefined;
  success?: boolean | undefined;
  passed?: Array<string> | undefined;
  failed?: Array<string> | undefined;
  metrics?: Metrics | undefined;
  datapoints?: Array<Datapoints> | undefined;
};

/** @internal */
export const Values$inboundSchema: z.ZodType<Values, z.ZodTypeDef, unknown> = z
  .union([z.number(), z.boolean()]);

/** @internal */
export type Values$Outbound = number | boolean;

/** @internal */
export const Values$outboundSchema: z.ZodType<
  Values$Outbound,
  z.ZodTypeDef,
  Values
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Values$ {
  /** @deprecated use `Values$inboundSchema` instead. */
  export const inboundSchema = Values$inboundSchema;
  /** @deprecated use `Values$outboundSchema` instead. */
  export const outboundSchema = Values$outboundSchema;
  /** @deprecated use `Values$Outbound` instead. */
  export type Outbound = Values$Outbound;
}

/** @internal */
export const ExperimentResultResponseDatapoints$inboundSchema: z.ZodType<
  ExperimentResultResponseDatapoints,
  z.ZodTypeDef,
  unknown
> = z.object({
  passed: z.array(z.string()).optional(),
  failed: z.array(z.string()).optional(),
});

/** @internal */
export type ExperimentResultResponseDatapoints$Outbound = {
  passed?: Array<string> | undefined;
  failed?: Array<string> | undefined;
};

/** @internal */
export const ExperimentResultResponseDatapoints$outboundSchema: z.ZodType<
  ExperimentResultResponseDatapoints$Outbound,
  z.ZodTypeDef,
  ExperimentResultResponseDatapoints
> = z.object({
  passed: z.array(z.string()).optional(),
  failed: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentResultResponseDatapoints$ {
  /** @deprecated use `ExperimentResultResponseDatapoints$inboundSchema` instead. */
  export const inboundSchema = ExperimentResultResponseDatapoints$inboundSchema;
  /** @deprecated use `ExperimentResultResponseDatapoints$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentResultResponseDatapoints$outboundSchema;
  /** @deprecated use `ExperimentResultResponseDatapoints$Outbound` instead. */
  export type Outbound = ExperimentResultResponseDatapoints$Outbound;
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    metric_name: z.string().optional(),
    metric_type: z.string().optional(),
    event_name: z.string().optional(),
    event_type: z.string().optional(),
    aggregate: z.number().optional(),
    values: z.array(z.union([z.number(), z.boolean()])).optional(),
    datapoints: z.lazy(() => ExperimentResultResponseDatapoints$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "metric_name": "metricName",
      "metric_type": "metricType",
      "event_name": "eventName",
      "event_type": "eventType",
    });
  });

/** @internal */
export type Details$Outbound = {
  metric_name?: string | undefined;
  metric_type?: string | undefined;
  event_name?: string | undefined;
  event_type?: string | undefined;
  aggregate?: number | undefined;
  values?: Array<number | boolean> | undefined;
  datapoints?: ExperimentResultResponseDatapoints$Outbound | undefined;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  metricName: z.string().optional(),
  metricType: z.string().optional(),
  eventName: z.string().optional(),
  eventType: z.string().optional(),
  aggregate: z.number().optional(),
  values: z.array(z.union([z.number(), z.boolean()])).optional(),
  datapoints: z.lazy(() => ExperimentResultResponseDatapoints$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    metricName: "metric_name",
    metricType: "metric_type",
    eventName: "event_name",
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    aggregation_function: z.string().optional(),
    details: z.array(z.lazy(() => Details$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "aggregation_function": "aggregationFunction",
    });
  });

/** @internal */
export type Metrics$Outbound = {
  aggregation_function?: string | undefined;
  details?: Array<Details$Outbound> | undefined;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  aggregationFunction: z.string().optional(),
  details: z.array(z.lazy(() => Details$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    aggregationFunction: "aggregation_function",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([z.number(), z.boolean()]);

/** @internal */
export type Value$Outbound = number | boolean;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

/** @internal */
export const ExperimentResultResponseMetrics$inboundSchema: z.ZodType<
  ExperimentResultResponseMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  event_name: z.string().optional(),
  event_type: z.string().optional(),
  value: z.union([z.number(), z.boolean()]).optional(),
  passed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_name": "eventName",
    "event_type": "eventType",
  });
});

/** @internal */
export type ExperimentResultResponseMetrics$Outbound = {
  name?: string | undefined;
  event_name?: string | undefined;
  event_type?: string | undefined;
  value?: number | boolean | undefined;
  passed?: boolean | undefined;
};

/** @internal */
export const ExperimentResultResponseMetrics$outboundSchema: z.ZodType<
  ExperimentResultResponseMetrics$Outbound,
  z.ZodTypeDef,
  ExperimentResultResponseMetrics
> = z.object({
  name: z.string().optional(),
  eventName: z.string().optional(),
  eventType: z.string().optional(),
  value: z.union([z.number(), z.boolean()]).optional(),
  passed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    eventName: "event_name",
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentResultResponseMetrics$ {
  /** @deprecated use `ExperimentResultResponseMetrics$inboundSchema` instead. */
  export const inboundSchema = ExperimentResultResponseMetrics$inboundSchema;
  /** @deprecated use `ExperimentResultResponseMetrics$outboundSchema` instead. */
  export const outboundSchema = ExperimentResultResponseMetrics$outboundSchema;
  /** @deprecated use `ExperimentResultResponseMetrics$Outbound` instead. */
  export type Outbound = ExperimentResultResponseMetrics$Outbound;
}

/** @internal */
export const Datapoints$inboundSchema: z.ZodType<
  Datapoints,
  z.ZodTypeDef,
  unknown
> = z.object({
  datapoint_id: z.string().optional(),
  session_id: z.string().optional(),
  passed: z.boolean().optional(),
  metrics: z.array(z.lazy(() => ExperimentResultResponseMetrics$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "datapoint_id": "datapointId",
    "session_id": "sessionId",
  });
});

/** @internal */
export type Datapoints$Outbound = {
  datapoint_id?: string | undefined;
  session_id?: string | undefined;
  passed?: boolean | undefined;
  metrics?: Array<ExperimentResultResponseMetrics$Outbound> | undefined;
};

/** @internal */
export const Datapoints$outboundSchema: z.ZodType<
  Datapoints$Outbound,
  z.ZodTypeDef,
  Datapoints
> = z.object({
  datapointId: z.string().optional(),
  sessionId: z.string().optional(),
  passed: z.boolean().optional(),
  metrics: z.array(z.lazy(() => ExperimentResultResponseMetrics$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    datapointId: "datapoint_id",
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Datapoints$ {
  /** @deprecated use `Datapoints$inboundSchema` instead. */
  export const inboundSchema = Datapoints$inboundSchema;
  /** @deprecated use `Datapoints$outboundSchema` instead. */
  export const outboundSchema = Datapoints$outboundSchema;
  /** @deprecated use `Datapoints$Outbound` instead. */
  export type Outbound = Datapoints$Outbound;
}

/** @internal */
export const ExperimentResultResponse$inboundSchema: z.ZodType<
  ExperimentResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  success: z.boolean().optional(),
  passed: z.array(z.string()).optional(),
  failed: z.array(z.string()).optional(),
  metrics: z.lazy(() => Metrics$inboundSchema).optional(),
  datapoints: z.array(z.lazy(() => Datapoints$inboundSchema)).optional(),
});

/** @internal */
export type ExperimentResultResponse$Outbound = {
  status?: string | undefined;
  success?: boolean | undefined;
  passed?: Array<string> | undefined;
  failed?: Array<string> | undefined;
  metrics?: Metrics$Outbound | undefined;
  datapoints?: Array<Datapoints$Outbound> | undefined;
};

/** @internal */
export const ExperimentResultResponse$outboundSchema: z.ZodType<
  ExperimentResultResponse$Outbound,
  z.ZodTypeDef,
  ExperimentResultResponse
> = z.object({
  status: z.string().optional(),
  success: z.boolean().optional(),
  passed: z.array(z.string()).optional(),
  failed: z.array(z.string()).optional(),
  metrics: z.lazy(() => Metrics$outboundSchema).optional(),
  datapoints: z.array(z.lazy(() => Datapoints$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentResultResponse$ {
  /** @deprecated use `ExperimentResultResponse$inboundSchema` instead. */
  export const inboundSchema = ExperimentResultResponse$inboundSchema;
  /** @deprecated use `ExperimentResultResponse$outboundSchema` instead. */
  export const outboundSchema = ExperimentResultResponse$outboundSchema;
  /** @deprecated use `ExperimentResultResponse$Outbound` instead. */
  export type Outbound = ExperimentResultResponse$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Type of the metric - "custom", "model", "human" or "composite"
 */
export const MetricType = {
  Custom: "custom",
  Model: "model",
  Human: "human",
  Composite: "composite",
} as const;
/**
 * Type of the metric - "custom", "model", "human" or "composite"
 */
export type MetricType = ClosedEnum<typeof MetricType>;

/**
 * The data type of the metric value - "boolean", "float", "string"
 */
export const ReturnTypeT = {
  Boolean: "boolean",
  Float: "float",
  String: "string",
} as const;
/**
 * The data type of the metric value - "boolean", "float", "string"
 */
export type ReturnTypeT = ClosedEnum<typeof ReturnTypeT>;

/**
 * Threshold for numeric metrics to decide passing or failing in tests
 */
export type Threshold = {
  min?: number | undefined;
  max?: number | undefined;
};

export type Metric = {
  /**
   * Name of the metric
   */
  name: string;
  /**
   * Criteria for human or composite metrics
   */
  criteria?: string | undefined;
  /**
   * Associated code block for the metric
   */
  codeSnippet?: string | undefined;
  /**
   * Evaluator prompt for the metric
   */
  prompt?: string | undefined;
  /**
   * Name of the project associated with metric
   */
  task: string;
  /**
   * Type of the metric - "custom", "model", "human" or "composite"
   */
  type: MetricType;
  /**
   * Short description of what the metric does
   */
  description: string;
  /**
   * Whether to compute on all production events automatically
   */
  enabledInProd?: boolean | undefined;
  /**
   * Whether a ground truth (on metadata) is required to compute it
   */
  needsGroundTruth?: boolean | undefined;
  /**
   * The data type of the metric value - "boolean", "float", "string"
   */
  returnType: ReturnTypeT;
  /**
   * Threshold for numeric metrics to decide passing or failing in tests
   */
  threshold?: Threshold | undefined;
  /**
   * Threshold for boolean metrics to decide passing or failing in tests
   */
  passWhen?: boolean | undefined;
  /**
   * Unique idenitifier
   */
  id?: string | undefined;
  /**
   * Name of event that the metric is set to be computed on
   */
  eventName?: string | undefined;
  /**
   * Type of event that the metric is set to be computed on
   */
  eventType?: string | undefined;
  /**
   * Child metrics added under composite events
   */
  childMetrics?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const MetricType$inboundSchema: z.ZodNativeEnum<typeof MetricType> = z
  .nativeEnum(MetricType);

/** @internal */
export const MetricType$outboundSchema: z.ZodNativeEnum<typeof MetricType> =
  MetricType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricType$ {
  /** @deprecated use `MetricType$inboundSchema` instead. */
  export const inboundSchema = MetricType$inboundSchema;
  /** @deprecated use `MetricType$outboundSchema` instead. */
  export const outboundSchema = MetricType$outboundSchema;
}

/** @internal */
export const ReturnTypeT$inboundSchema: z.ZodNativeEnum<typeof ReturnTypeT> = z
  .nativeEnum(ReturnTypeT);

/** @internal */
export const ReturnTypeT$outboundSchema: z.ZodNativeEnum<typeof ReturnTypeT> =
  ReturnTypeT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnTypeT$ {
  /** @deprecated use `ReturnTypeT$inboundSchema` instead. */
  export const inboundSchema = ReturnTypeT$inboundSchema;
  /** @deprecated use `ReturnTypeT$outboundSchema` instead. */
  export const outboundSchema = ReturnTypeT$outboundSchema;
}

/** @internal */
export const Threshold$inboundSchema: z.ZodType<
  Threshold,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
});

/** @internal */
export type Threshold$Outbound = {
  min?: number | undefined;
  max?: number | undefined;
};

/** @internal */
export const Threshold$outboundSchema: z.ZodType<
  Threshold$Outbound,
  z.ZodTypeDef,
  Threshold
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Threshold$ {
  /** @deprecated use `Threshold$inboundSchema` instead. */
  export const inboundSchema = Threshold$inboundSchema;
  /** @deprecated use `Threshold$outboundSchema` instead. */
  export const outboundSchema = Threshold$outboundSchema;
  /** @deprecated use `Threshold$Outbound` instead. */
  export type Outbound = Threshold$Outbound;
}

/** @internal */
export const Metric$inboundSchema: z.ZodType<Metric, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    criteria: z.string().optional(),
    code_snippet: z.string().optional(),
    prompt: z.string().optional(),
    task: z.string(),
    type: MetricType$inboundSchema,
    description: z.string(),
    enabled_in_prod: z.boolean().optional(),
    needs_ground_truth: z.boolean().optional(),
    return_type: ReturnTypeT$inboundSchema,
    threshold: z.lazy(() => Threshold$inboundSchema).optional(),
    pass_when: z.boolean().optional(),
    _id: z.string().optional(),
    event_name: z.string().optional(),
    event_type: z.string().optional(),
    child_metrics: z.array(z.record(z.any())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "code_snippet": "codeSnippet",
      "enabled_in_prod": "enabledInProd",
      "needs_ground_truth": "needsGroundTruth",
      "return_type": "returnType",
      "pass_when": "passWhen",
      "_id": "id",
      "event_name": "eventName",
      "event_type": "eventType",
      "child_metrics": "childMetrics",
    });
  });

/** @internal */
export type Metric$Outbound = {
  name: string;
  criteria?: string | undefined;
  code_snippet?: string | undefined;
  prompt?: string | undefined;
  task: string;
  type: string;
  description: string;
  enabled_in_prod?: boolean | undefined;
  needs_ground_truth?: boolean | undefined;
  return_type: string;
  threshold?: Threshold$Outbound | undefined;
  pass_when?: boolean | undefined;
  _id?: string | undefined;
  event_name?: string | undefined;
  event_type?: string | undefined;
  child_metrics?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const Metric$outboundSchema: z.ZodType<
  Metric$Outbound,
  z.ZodTypeDef,
  Metric
> = z.object({
  name: z.string(),
  criteria: z.string().optional(),
  codeSnippet: z.string().optional(),
  prompt: z.string().optional(),
  task: z.string(),
  type: MetricType$outboundSchema,
  description: z.string(),
  enabledInProd: z.boolean().optional(),
  needsGroundTruth: z.boolean().optional(),
  returnType: ReturnTypeT$outboundSchema,
  threshold: z.lazy(() => Threshold$outboundSchema).optional(),
  passWhen: z.boolean().optional(),
  id: z.string().optional(),
  eventName: z.string().optional(),
  eventType: z.string().optional(),
  childMetrics: z.array(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    codeSnippet: "code_snippet",
    enabledInProd: "enabled_in_prod",
    needsGroundTruth: "needs_ground_truth",
    returnType: "return_type",
    passWhen: "pass_when",
    id: "_id",
    eventName: "event_name",
    eventType: "event_type",
    childMetrics: "child_metrics",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metric$ {
  /** @deprecated use `Metric$inboundSchema` instead. */
  export const inboundSchema = Metric$inboundSchema;
  /** @deprecated use `Metric$outboundSchema` instead. */
  export const outboundSchema = Metric$outboundSchema;
  /** @deprecated use `Metric$Outbound` instead. */
  export type Outbound = Metric$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

export class UpdateDatapointRequestHistory extends SpeakeasyBase {}

export class UpdateDatapointRequest extends SpeakeasyBase {
    /**
     * Expected output JSON object for the datapoint
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ground_truth" })
    groundTruth?: Record<string, any>;

    /**
     * Update history for the datapoint
     */
    @SpeakeasyMetadata({ elemType: UpdateDatapointRequestHistory })
    @Expose({ name: "history" })
    @Type(() => UpdateDatapointRequestHistory)
    history?: UpdateDatapointRequestHistory[];

    /**
     * Arbitrary JSON object containing the inputs for the datapoint
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inputs" })
    inputs?: Record<string, any>;

    /**
     * Ids of all datasets that include the datapoint
     */
    @SpeakeasyMetadata()
    @Expose({ name: "linked_datasets" })
    linkedDatasets?: string[];

    /**
     * Ids of evaluations where the datapoint is included
     */
    @SpeakeasyMetadata()
    @Expose({ name: "linked_evals" })
    linkedEvals?: string[];

    /**
     * Any additional metadata for the datapoint
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata?: Record<string, any>;

    /**
     * Whether the datapoint is saved or detected
     */
    @SpeakeasyMetadata()
    @Expose({ name: "saved" })
    saved?: boolean;

    /**
     * evaluation or event - specify the type of usage
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OldValues = number | boolean;

export type NewValues = number | boolean;

export type ExperimentComparisonResponseMetrics = {
  metricName?: string | undefined;
  eventName?: string | undefined;
  metricType?: string | undefined;
  eventType?: string | undefined;
  oldAggregate?: number | undefined;
  newAggregate?: number | undefined;
  foundCount?: number | undefined;
  improvedCount?: number | undefined;
  degradedCount?: number | undefined;
  sameCount?: number | undefined;
  improved?: Array<string> | undefined;
  degraded?: Array<string> | undefined;
  same?: Array<string> | undefined;
  oldValues?: Array<number | boolean> | undefined;
  newValues?: Array<number | boolean> | undefined;
};

export type EventDetails = {
  eventName?: string | undefined;
  eventType?: string | undefined;
  presence?: string | undefined;
};

export type Evaluators = {};

export type ExperimentComparisonResponseResults = {};

export type ExperimentComparisonResponseSchemasConfiguration = {};

export type Metadata = {};

export type PassingRanges = {};

export type OldRun = {
  id?: string | undefined;
  runId?: string | undefined;
  project?: string | undefined;
  tenant?: string | undefined;
  createdAt?: Date | undefined;
  eventIds?: Array<string> | undefined;
  sessionIds?: Array<string> | undefined;
  datasetId?: string | undefined;
  datapointIds?: Array<string> | undefined;
  evaluators?: Array<Evaluators> | undefined;
  results?: ExperimentComparisonResponseResults | undefined;
  configuration?: ExperimentComparisonResponseSchemasConfiguration | undefined;
  metadata?: Metadata | undefined;
  passingRanges?: PassingRanges | undefined;
  status?: string | undefined;
  name?: string | undefined;
};

export type ExperimentComparisonResponseEvaluators = {};

export type ExperimentComparisonResponseSchemasResults = {};

export type ExperimentComparisonResponseConfiguration = {};

export type ExperimentComparisonResponseMetadata = {};

export type ExperimentComparisonResponsePassingRanges = {};

export type NewRun = {
  id?: string | undefined;
  runId?: string | undefined;
  project?: string | undefined;
  tenant?: string | undefined;
  createdAt?: Date | undefined;
  eventIds?: Array<string> | undefined;
  sessionIds?: Array<string> | undefined;
  datasetId?: string | undefined;
  datapointIds?: Array<string> | undefined;
  evaluators?: Array<ExperimentComparisonResponseEvaluators> | undefined;
  results?: ExperimentComparisonResponseSchemasResults | undefined;
  configuration?: ExperimentComparisonResponseConfiguration | undefined;
  metadata?: ExperimentComparisonResponseMetadata | undefined;
  passingRanges?: ExperimentComparisonResponsePassingRanges | undefined;
  status?: string | undefined;
  name?: string | undefined;
};

export type ExperimentComparisonResponse = {
  metrics?: Array<ExperimentComparisonResponseMetrics> | undefined;
  commonDatapoints?: Array<string> | undefined;
  eventDetails?: Array<EventDetails> | undefined;
  oldRun?: OldRun | undefined;
  newRun?: NewRun | undefined;
};

/** @internal */
export const OldValues$inboundSchema: z.ZodType<
  OldValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean()]);

/** @internal */
export type OldValues$Outbound = number | boolean;

/** @internal */
export const OldValues$outboundSchema: z.ZodType<
  OldValues$Outbound,
  z.ZodTypeDef,
  OldValues
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OldValues$ {
  /** @deprecated use `OldValues$inboundSchema` instead. */
  export const inboundSchema = OldValues$inboundSchema;
  /** @deprecated use `OldValues$outboundSchema` instead. */
  export const outboundSchema = OldValues$outboundSchema;
  /** @deprecated use `OldValues$Outbound` instead. */
  export type Outbound = OldValues$Outbound;
}

export function oldValuesToJSON(oldValues: OldValues): string {
  return JSON.stringify(OldValues$outboundSchema.parse(oldValues));
}

export function oldValuesFromJSON(
  jsonString: string,
): SafeParseResult<OldValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OldValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OldValues' from JSON`,
  );
}

/** @internal */
export const NewValues$inboundSchema: z.ZodType<
  NewValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean()]);

/** @internal */
export type NewValues$Outbound = number | boolean;

/** @internal */
export const NewValues$outboundSchema: z.ZodType<
  NewValues$Outbound,
  z.ZodTypeDef,
  NewValues
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewValues$ {
  /** @deprecated use `NewValues$inboundSchema` instead. */
  export const inboundSchema = NewValues$inboundSchema;
  /** @deprecated use `NewValues$outboundSchema` instead. */
  export const outboundSchema = NewValues$outboundSchema;
  /** @deprecated use `NewValues$Outbound` instead. */
  export type Outbound = NewValues$Outbound;
}

export function newValuesToJSON(newValues: NewValues): string {
  return JSON.stringify(NewValues$outboundSchema.parse(newValues));
}

export function newValuesFromJSON(
  jsonString: string,
): SafeParseResult<NewValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewValues' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseMetrics$inboundSchema: z.ZodType<
  ExperimentComparisonResponseMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric_name: z.string().optional(),
  event_name: z.string().optional(),
  metric_type: z.string().optional(),
  event_type: z.string().optional(),
  old_aggregate: z.number().optional(),
  new_aggregate: z.number().optional(),
  found_count: z.number().int().optional(),
  improved_count: z.number().int().optional(),
  degraded_count: z.number().int().optional(),
  same_count: z.number().int().optional(),
  improved: z.array(z.string()).optional(),
  degraded: z.array(z.string()).optional(),
  same: z.array(z.string()).optional(),
  old_values: z.array(z.union([z.number(), z.boolean()])).optional(),
  new_values: z.array(z.union([z.number(), z.boolean()])).optional(),
}).transform((v) => {
  return remap$(v, {
    "metric_name": "metricName",
    "event_name": "eventName",
    "metric_type": "metricType",
    "event_type": "eventType",
    "old_aggregate": "oldAggregate",
    "new_aggregate": "newAggregate",
    "found_count": "foundCount",
    "improved_count": "improvedCount",
    "degraded_count": "degradedCount",
    "same_count": "sameCount",
    "old_values": "oldValues",
    "new_values": "newValues",
  });
});

/** @internal */
export type ExperimentComparisonResponseMetrics$Outbound = {
  metric_name?: string | undefined;
  event_name?: string | undefined;
  metric_type?: string | undefined;
  event_type?: string | undefined;
  old_aggregate?: number | undefined;
  new_aggregate?: number | undefined;
  found_count?: number | undefined;
  improved_count?: number | undefined;
  degraded_count?: number | undefined;
  same_count?: number | undefined;
  improved?: Array<string> | undefined;
  degraded?: Array<string> | undefined;
  same?: Array<string> | undefined;
  old_values?: Array<number | boolean> | undefined;
  new_values?: Array<number | boolean> | undefined;
};

/** @internal */
export const ExperimentComparisonResponseMetrics$outboundSchema: z.ZodType<
  ExperimentComparisonResponseMetrics$Outbound,
  z.ZodTypeDef,
  ExperimentComparisonResponseMetrics
> = z.object({
  metricName: z.string().optional(),
  eventName: z.string().optional(),
  metricType: z.string().optional(),
  eventType: z.string().optional(),
  oldAggregate: z.number().optional(),
  newAggregate: z.number().optional(),
  foundCount: z.number().int().optional(),
  improvedCount: z.number().int().optional(),
  degradedCount: z.number().int().optional(),
  sameCount: z.number().int().optional(),
  improved: z.array(z.string()).optional(),
  degraded: z.array(z.string()).optional(),
  same: z.array(z.string()).optional(),
  oldValues: z.array(z.union([z.number(), z.boolean()])).optional(),
  newValues: z.array(z.union([z.number(), z.boolean()])).optional(),
}).transform((v) => {
  return remap$(v, {
    metricName: "metric_name",
    eventName: "event_name",
    metricType: "metric_type",
    eventType: "event_type",
    oldAggregate: "old_aggregate",
    newAggregate: "new_aggregate",
    foundCount: "found_count",
    improvedCount: "improved_count",
    degradedCount: "degraded_count",
    sameCount: "same_count",
    oldValues: "old_values",
    newValues: "new_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseMetrics$ {
  /** @deprecated use `ExperimentComparisonResponseMetrics$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseMetrics$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseMetrics$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseMetrics$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseMetrics$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseMetrics$Outbound;
}

export function experimentComparisonResponseMetricsToJSON(
  experimentComparisonResponseMetrics: ExperimentComparisonResponseMetrics,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseMetrics$outboundSchema.parse(
      experimentComparisonResponseMetrics,
    ),
  );
}

export function experimentComparisonResponseMetricsFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentComparisonResponseMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentComparisonResponseMetrics' from JSON`,
  );
}

/** @internal */
export const EventDetails$inboundSchema: z.ZodType<
  EventDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_name: z.string().optional(),
  event_type: z.string().optional(),
  presence: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_name": "eventName",
    "event_type": "eventType",
  });
});

/** @internal */
export type EventDetails$Outbound = {
  event_name?: string | undefined;
  event_type?: string | undefined;
  presence?: string | undefined;
};

/** @internal */
export const EventDetails$outboundSchema: z.ZodType<
  EventDetails$Outbound,
  z.ZodTypeDef,
  EventDetails
> = z.object({
  eventName: z.string().optional(),
  eventType: z.string().optional(),
  presence: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    eventName: "event_name",
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventDetails$ {
  /** @deprecated use `EventDetails$inboundSchema` instead. */
  export const inboundSchema = EventDetails$inboundSchema;
  /** @deprecated use `EventDetails$outboundSchema` instead. */
  export const outboundSchema = EventDetails$outboundSchema;
  /** @deprecated use `EventDetails$Outbound` instead. */
  export type Outbound = EventDetails$Outbound;
}

export function eventDetailsToJSON(eventDetails: EventDetails): string {
  return JSON.stringify(EventDetails$outboundSchema.parse(eventDetails));
}

export function eventDetailsFromJSON(
  jsonString: string,
): SafeParseResult<EventDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventDetails' from JSON`,
  );
}

/** @internal */
export const Evaluators$inboundSchema: z.ZodType<
  Evaluators,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Evaluators$Outbound = {};

/** @internal */
export const Evaluators$outboundSchema: z.ZodType<
  Evaluators$Outbound,
  z.ZodTypeDef,
  Evaluators
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evaluators$ {
  /** @deprecated use `Evaluators$inboundSchema` instead. */
  export const inboundSchema = Evaluators$inboundSchema;
  /** @deprecated use `Evaluators$outboundSchema` instead. */
  export const outboundSchema = Evaluators$outboundSchema;
  /** @deprecated use `Evaluators$Outbound` instead. */
  export type Outbound = Evaluators$Outbound;
}

export function evaluatorsToJSON(evaluators: Evaluators): string {
  return JSON.stringify(Evaluators$outboundSchema.parse(evaluators));
}

export function evaluatorsFromJSON(
  jsonString: string,
): SafeParseResult<Evaluators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evaluators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evaluators' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseResults$inboundSchema: z.ZodType<
  ExperimentComparisonResponseResults,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentComparisonResponseResults$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseResults$outboundSchema: z.ZodType<
  ExperimentComparisonResponseResults$Outbound,
  z.ZodTypeDef,
  ExperimentComparisonResponseResults
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseResults$ {
  /** @deprecated use `ExperimentComparisonResponseResults$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseResults$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseResults$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseResults$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseResults$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseResults$Outbound;
}

export function experimentComparisonResponseResultsToJSON(
  experimentComparisonResponseResults: ExperimentComparisonResponseResults,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseResults$outboundSchema.parse(
      experimentComparisonResponseResults,
    ),
  );
}

export function experimentComparisonResponseResultsFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentComparisonResponseResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentComparisonResponseResults' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseSchemasConfiguration$inboundSchema:
  z.ZodType<
    ExperimentComparisonResponseSchemasConfiguration,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type ExperimentComparisonResponseSchemasConfiguration$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseSchemasConfiguration$outboundSchema:
  z.ZodType<
    ExperimentComparisonResponseSchemasConfiguration$Outbound,
    z.ZodTypeDef,
    ExperimentComparisonResponseSchemasConfiguration
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseSchemasConfiguration$ {
  /** @deprecated use `ExperimentComparisonResponseSchemasConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseSchemasConfiguration$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseSchemasConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseSchemasConfiguration$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseSchemasConfiguration$Outbound` instead. */
  export type Outbound =
    ExperimentComparisonResponseSchemasConfiguration$Outbound;
}

export function experimentComparisonResponseSchemasConfigurationToJSON(
  experimentComparisonResponseSchemasConfiguration:
    ExperimentComparisonResponseSchemasConfiguration,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseSchemasConfiguration$outboundSchema.parse(
      experimentComparisonResponseSchemasConfiguration,
    ),
  );
}

export function experimentComparisonResponseSchemasConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<
  ExperimentComparisonResponseSchemasConfiguration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseSchemasConfiguration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExperimentComparisonResponseSchemasConfiguration' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const PassingRanges$inboundSchema: z.ZodType<
  PassingRanges,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PassingRanges$Outbound = {};

/** @internal */
export const PassingRanges$outboundSchema: z.ZodType<
  PassingRanges$Outbound,
  z.ZodTypeDef,
  PassingRanges
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassingRanges$ {
  /** @deprecated use `PassingRanges$inboundSchema` instead. */
  export const inboundSchema = PassingRanges$inboundSchema;
  /** @deprecated use `PassingRanges$outboundSchema` instead. */
  export const outboundSchema = PassingRanges$outboundSchema;
  /** @deprecated use `PassingRanges$Outbound` instead. */
  export type Outbound = PassingRanges$Outbound;
}

export function passingRangesToJSON(passingRanges: PassingRanges): string {
  return JSON.stringify(PassingRanges$outboundSchema.parse(passingRanges));
}

export function passingRangesFromJSON(
  jsonString: string,
): SafeParseResult<PassingRanges, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassingRanges$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassingRanges' from JSON`,
  );
}

/** @internal */
export const OldRun$inboundSchema: z.ZodType<OldRun, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string().optional(),
    run_id: z.string().optional(),
    project: z.string().optional(),
    tenant: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    event_ids: z.array(z.string()).optional(),
    session_ids: z.array(z.string()).optional(),
    dataset_id: z.string().optional(),
    datapoint_ids: z.array(z.string()).optional(),
    evaluators: z.array(z.lazy(() => Evaluators$inboundSchema)).optional(),
    results: z.lazy(() => ExperimentComparisonResponseResults$inboundSchema)
      .optional(),
    configuration: z.lazy(() =>
      ExperimentComparisonResponseSchemasConfiguration$inboundSchema
    ).optional(),
    metadata: z.lazy(() => Metadata$inboundSchema).optional(),
    passing_ranges: z.lazy(() => PassingRanges$inboundSchema).optional(),
    status: z.string().optional(),
    name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "run_id": "runId",
      "created_at": "createdAt",
      "event_ids": "eventIds",
      "session_ids": "sessionIds",
      "dataset_id": "datasetId",
      "datapoint_ids": "datapointIds",
      "passing_ranges": "passingRanges",
    });
  });

/** @internal */
export type OldRun$Outbound = {
  _id?: string | undefined;
  run_id?: string | undefined;
  project?: string | undefined;
  tenant?: string | undefined;
  created_at?: string | undefined;
  event_ids?: Array<string> | undefined;
  session_ids?: Array<string> | undefined;
  dataset_id?: string | undefined;
  datapoint_ids?: Array<string> | undefined;
  evaluators?: Array<Evaluators$Outbound> | undefined;
  results?: ExperimentComparisonResponseResults$Outbound | undefined;
  configuration?:
    | ExperimentComparisonResponseSchemasConfiguration$Outbound
    | undefined;
  metadata?: Metadata$Outbound | undefined;
  passing_ranges?: PassingRanges$Outbound | undefined;
  status?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const OldRun$outboundSchema: z.ZodType<
  OldRun$Outbound,
  z.ZodTypeDef,
  OldRun
> = z.object({
  id: z.string().optional(),
  runId: z.string().optional(),
  project: z.string().optional(),
  tenant: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  eventIds: z.array(z.string()).optional(),
  sessionIds: z.array(z.string()).optional(),
  datasetId: z.string().optional(),
  datapointIds: z.array(z.string()).optional(),
  evaluators: z.array(z.lazy(() => Evaluators$outboundSchema)).optional(),
  results: z.lazy(() => ExperimentComparisonResponseResults$outboundSchema)
    .optional(),
  configuration: z.lazy(() =>
    ExperimentComparisonResponseSchemasConfiguration$outboundSchema
  ).optional(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
  passingRanges: z.lazy(() => PassingRanges$outboundSchema).optional(),
  status: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    runId: "run_id",
    createdAt: "created_at",
    eventIds: "event_ids",
    sessionIds: "session_ids",
    datasetId: "dataset_id",
    datapointIds: "datapoint_ids",
    passingRanges: "passing_ranges",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OldRun$ {
  /** @deprecated use `OldRun$inboundSchema` instead. */
  export const inboundSchema = OldRun$inboundSchema;
  /** @deprecated use `OldRun$outboundSchema` instead. */
  export const outboundSchema = OldRun$outboundSchema;
  /** @deprecated use `OldRun$Outbound` instead. */
  export type Outbound = OldRun$Outbound;
}

export function oldRunToJSON(oldRun: OldRun): string {
  return JSON.stringify(OldRun$outboundSchema.parse(oldRun));
}

export function oldRunFromJSON(
  jsonString: string,
): SafeParseResult<OldRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OldRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OldRun' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseEvaluators$inboundSchema: z.ZodType<
  ExperimentComparisonResponseEvaluators,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentComparisonResponseEvaluators$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseEvaluators$outboundSchema: z.ZodType<
  ExperimentComparisonResponseEvaluators$Outbound,
  z.ZodTypeDef,
  ExperimentComparisonResponseEvaluators
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseEvaluators$ {
  /** @deprecated use `ExperimentComparisonResponseEvaluators$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseEvaluators$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseEvaluators$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseEvaluators$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseEvaluators$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseEvaluators$Outbound;
}

export function experimentComparisonResponseEvaluatorsToJSON(
  experimentComparisonResponseEvaluators:
    ExperimentComparisonResponseEvaluators,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseEvaluators$outboundSchema.parse(
      experimentComparisonResponseEvaluators,
    ),
  );
}

export function experimentComparisonResponseEvaluatorsFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentComparisonResponseEvaluators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseEvaluators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentComparisonResponseEvaluators' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseSchemasResults$inboundSchema:
  z.ZodType<ExperimentComparisonResponseSchemasResults, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ExperimentComparisonResponseSchemasResults$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseSchemasResults$outboundSchema:
  z.ZodType<
    ExperimentComparisonResponseSchemasResults$Outbound,
    z.ZodTypeDef,
    ExperimentComparisonResponseSchemasResults
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseSchemasResults$ {
  /** @deprecated use `ExperimentComparisonResponseSchemasResults$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseSchemasResults$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseSchemasResults$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseSchemasResults$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseSchemasResults$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseSchemasResults$Outbound;
}

export function experimentComparisonResponseSchemasResultsToJSON(
  experimentComparisonResponseSchemasResults:
    ExperimentComparisonResponseSchemasResults,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseSchemasResults$outboundSchema.parse(
      experimentComparisonResponseSchemasResults,
    ),
  );
}

export function experimentComparisonResponseSchemasResultsFromJSON(
  jsonString: string,
): SafeParseResult<
  ExperimentComparisonResponseSchemasResults,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseSchemasResults$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExperimentComparisonResponseSchemasResults' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseConfiguration$inboundSchema: z.ZodType<
  ExperimentComparisonResponseConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentComparisonResponseConfiguration$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseConfiguration$outboundSchema:
  z.ZodType<
    ExperimentComparisonResponseConfiguration$Outbound,
    z.ZodTypeDef,
    ExperimentComparisonResponseConfiguration
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseConfiguration$ {
  /** @deprecated use `ExperimentComparisonResponseConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseConfiguration$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseConfiguration$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseConfiguration$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseConfiguration$Outbound;
}

export function experimentComparisonResponseConfigurationToJSON(
  experimentComparisonResponseConfiguration:
    ExperimentComparisonResponseConfiguration,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseConfiguration$outboundSchema.parse(
      experimentComparisonResponseConfiguration,
    ),
  );
}

export function experimentComparisonResponseConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<
  ExperimentComparisonResponseConfiguration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseConfiguration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExperimentComparisonResponseConfiguration' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponseMetadata$inboundSchema: z.ZodType<
  ExperimentComparisonResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentComparisonResponseMetadata$Outbound = {};

/** @internal */
export const ExperimentComparisonResponseMetadata$outboundSchema: z.ZodType<
  ExperimentComparisonResponseMetadata$Outbound,
  z.ZodTypeDef,
  ExperimentComparisonResponseMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponseMetadata$ {
  /** @deprecated use `ExperimentComparisonResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponseMetadata$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponseMetadata$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponseMetadata$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponseMetadata$Outbound;
}

export function experimentComparisonResponseMetadataToJSON(
  experimentComparisonResponseMetadata: ExperimentComparisonResponseMetadata,
): string {
  return JSON.stringify(
    ExperimentComparisonResponseMetadata$outboundSchema.parse(
      experimentComparisonResponseMetadata,
    ),
  );
}

export function experimentComparisonResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentComparisonResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentComparisonResponseMetadata' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponsePassingRanges$inboundSchema: z.ZodType<
  ExperimentComparisonResponsePassingRanges,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentComparisonResponsePassingRanges$Outbound = {};

/** @internal */
export const ExperimentComparisonResponsePassingRanges$outboundSchema:
  z.ZodType<
    ExperimentComparisonResponsePassingRanges$Outbound,
    z.ZodTypeDef,
    ExperimentComparisonResponsePassingRanges
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponsePassingRanges$ {
  /** @deprecated use `ExperimentComparisonResponsePassingRanges$inboundSchema` instead. */
  export const inboundSchema =
    ExperimentComparisonResponsePassingRanges$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponsePassingRanges$outboundSchema` instead. */
  export const outboundSchema =
    ExperimentComparisonResponsePassingRanges$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponsePassingRanges$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponsePassingRanges$Outbound;
}

export function experimentComparisonResponsePassingRangesToJSON(
  experimentComparisonResponsePassingRanges:
    ExperimentComparisonResponsePassingRanges,
): string {
  return JSON.stringify(
    ExperimentComparisonResponsePassingRanges$outboundSchema.parse(
      experimentComparisonResponsePassingRanges,
    ),
  );
}

export function experimentComparisonResponsePassingRangesFromJSON(
  jsonString: string,
): SafeParseResult<
  ExperimentComparisonResponsePassingRanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExperimentComparisonResponsePassingRanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExperimentComparisonResponsePassingRanges' from JSON`,
  );
}

/** @internal */
export const NewRun$inboundSchema: z.ZodType<NewRun, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string().optional(),
    run_id: z.string().optional(),
    project: z.string().optional(),
    tenant: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    event_ids: z.array(z.string()).optional(),
    session_ids: z.array(z.string()).optional(),
    dataset_id: z.string().optional(),
    datapoint_ids: z.array(z.string()).optional(),
    evaluators: z.array(
      z.lazy(() => ExperimentComparisonResponseEvaluators$inboundSchema),
    ).optional(),
    results: z.lazy(() =>
      ExperimentComparisonResponseSchemasResults$inboundSchema
    ).optional(),
    configuration: z.lazy(() =>
      ExperimentComparisonResponseConfiguration$inboundSchema
    ).optional(),
    metadata: z.lazy(() => ExperimentComparisonResponseMetadata$inboundSchema)
      .optional(),
    passing_ranges: z.lazy(() =>
      ExperimentComparisonResponsePassingRanges$inboundSchema
    ).optional(),
    status: z.string().optional(),
    name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "run_id": "runId",
      "created_at": "createdAt",
      "event_ids": "eventIds",
      "session_ids": "sessionIds",
      "dataset_id": "datasetId",
      "datapoint_ids": "datapointIds",
      "passing_ranges": "passingRanges",
    });
  });

/** @internal */
export type NewRun$Outbound = {
  _id?: string | undefined;
  run_id?: string | undefined;
  project?: string | undefined;
  tenant?: string | undefined;
  created_at?: string | undefined;
  event_ids?: Array<string> | undefined;
  session_ids?: Array<string> | undefined;
  dataset_id?: string | undefined;
  datapoint_ids?: Array<string> | undefined;
  evaluators?:
    | Array<ExperimentComparisonResponseEvaluators$Outbound>
    | undefined;
  results?: ExperimentComparisonResponseSchemasResults$Outbound | undefined;
  configuration?:
    | ExperimentComparisonResponseConfiguration$Outbound
    | undefined;
  metadata?: ExperimentComparisonResponseMetadata$Outbound | undefined;
  passing_ranges?:
    | ExperimentComparisonResponsePassingRanges$Outbound
    | undefined;
  status?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const NewRun$outboundSchema: z.ZodType<
  NewRun$Outbound,
  z.ZodTypeDef,
  NewRun
> = z.object({
  id: z.string().optional(),
  runId: z.string().optional(),
  project: z.string().optional(),
  tenant: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  eventIds: z.array(z.string()).optional(),
  sessionIds: z.array(z.string()).optional(),
  datasetId: z.string().optional(),
  datapointIds: z.array(z.string()).optional(),
  evaluators: z.array(
    z.lazy(() => ExperimentComparisonResponseEvaluators$outboundSchema),
  ).optional(),
  results: z.lazy(() =>
    ExperimentComparisonResponseSchemasResults$outboundSchema
  ).optional(),
  configuration: z.lazy(() =>
    ExperimentComparisonResponseConfiguration$outboundSchema
  ).optional(),
  metadata: z.lazy(() => ExperimentComparisonResponseMetadata$outboundSchema)
    .optional(),
  passingRanges: z.lazy(() =>
    ExperimentComparisonResponsePassingRanges$outboundSchema
  ).optional(),
  status: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    runId: "run_id",
    createdAt: "created_at",
    eventIds: "event_ids",
    sessionIds: "session_ids",
    datasetId: "dataset_id",
    datapointIds: "datapoint_ids",
    passingRanges: "passing_ranges",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewRun$ {
  /** @deprecated use `NewRun$inboundSchema` instead. */
  export const inboundSchema = NewRun$inboundSchema;
  /** @deprecated use `NewRun$outboundSchema` instead. */
  export const outboundSchema = NewRun$outboundSchema;
  /** @deprecated use `NewRun$Outbound` instead. */
  export type Outbound = NewRun$Outbound;
}

export function newRunToJSON(newRun: NewRun): string {
  return JSON.stringify(NewRun$outboundSchema.parse(newRun));
}

export function newRunFromJSON(
  jsonString: string,
): SafeParseResult<NewRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewRun' from JSON`,
  );
}

/** @internal */
export const ExperimentComparisonResponse$inboundSchema: z.ZodType<
  ExperimentComparisonResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  metrics: z.array(
    z.lazy(() => ExperimentComparisonResponseMetrics$inboundSchema),
  ).optional(),
  commonDatapoints: z.array(z.string()).optional(),
  event_details: z.array(z.lazy(() => EventDetails$inboundSchema)).optional(),
  old_run: z.lazy(() => OldRun$inboundSchema).optional(),
  new_run: z.lazy(() => NewRun$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "event_details": "eventDetails",
    "old_run": "oldRun",
    "new_run": "newRun",
  });
});

/** @internal */
export type ExperimentComparisonResponse$Outbound = {
  metrics?: Array<ExperimentComparisonResponseMetrics$Outbound> | undefined;
  commonDatapoints?: Array<string> | undefined;
  event_details?: Array<EventDetails$Outbound> | undefined;
  old_run?: OldRun$Outbound | undefined;
  new_run?: NewRun$Outbound | undefined;
};

/** @internal */
export const ExperimentComparisonResponse$outboundSchema: z.ZodType<
  ExperimentComparisonResponse$Outbound,
  z.ZodTypeDef,
  ExperimentComparisonResponse
> = z.object({
  metrics: z.array(
    z.lazy(() => ExperimentComparisonResponseMetrics$outboundSchema),
  ).optional(),
  commonDatapoints: z.array(z.string()).optional(),
  eventDetails: z.array(z.lazy(() => EventDetails$outboundSchema)).optional(),
  oldRun: z.lazy(() => OldRun$outboundSchema).optional(),
  newRun: z.lazy(() => NewRun$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    eventDetails: "event_details",
    oldRun: "old_run",
    newRun: "new_run",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentComparisonResponse$ {
  /** @deprecated use `ExperimentComparisonResponse$inboundSchema` instead. */
  export const inboundSchema = ExperimentComparisonResponse$inboundSchema;
  /** @deprecated use `ExperimentComparisonResponse$outboundSchema` instead. */
  export const outboundSchema = ExperimentComparisonResponse$outboundSchema;
  /** @deprecated use `ExperimentComparisonResponse$Outbound` instead. */
  export type Outbound = ExperimentComparisonResponse$Outbound;
}

export function experimentComparisonResponseToJSON(
  experimentComparisonResponse: ExperimentComparisonResponse,
): string {
  return JSON.stringify(
    ExperimentComparisonResponse$outboundSchema.parse(
      experimentComparisonResponse,
    ),
  );
}

export function experimentComparisonResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentComparisonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentComparisonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentComparisonResponse' from JSON`,
  );
}

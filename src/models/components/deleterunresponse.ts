/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRunResponse = {
  id?: string | undefined;
  deleted?: boolean | undefined;
};

/** @internal */
export const DeleteRunResponse$inboundSchema: z.ZodType<
  DeleteRunResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  deleted: z.boolean().optional(),
});

/** @internal */
export type DeleteRunResponse$Outbound = {
  id?: string | undefined;
  deleted?: boolean | undefined;
};

/** @internal */
export const DeleteRunResponse$outboundSchema: z.ZodType<
  DeleteRunResponse$Outbound,
  z.ZodTypeDef,
  DeleteRunResponse
> = z.object({
  id: z.string().optional(),
  deleted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRunResponse$ {
  /** @deprecated use `DeleteRunResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteRunResponse$inboundSchema;
  /** @deprecated use `DeleteRunResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteRunResponse$outboundSchema;
  /** @deprecated use `DeleteRunResponse$Outbound` instead. */
  export type Outbound = DeleteRunResponse$Outbound;
}

export function deleteRunResponseToJSON(
  deleteRunResponse: DeleteRunResponse,
): string {
  return JSON.stringify(
    DeleteRunResponse$outboundSchema.parse(deleteRunResponse),
  );
}

export function deleteRunResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRunResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRunResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRunResponse' from JSON`,
  );
}

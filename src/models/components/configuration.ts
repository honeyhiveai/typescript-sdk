/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Env = {
  Dev: "dev",
  Staging: "staging",
  Prod: "prod",
} as const;
export type Env = ClosedEnum<typeof Env>;

/**
 * Type of API calling - "chat" or "completion"
 */
export const CallType = {
  Chat: "chat",
  Completion: "completion",
} as const;
/**
 * Type of API calling - "chat" or "completion"
 */
export type CallType = ClosedEnum<typeof CallType>;

/**
 * Response format for the model with the key "type" and value "text" or "json_object"
 */
export type ResponseFormat = {};

export type SelectedFunctions = {
  /**
   * UUID of the function
   */
  id?: string | undefined;
  /**
   * Name of the function
   */
  name?: string | undefined;
  /**
   * Description of the function
   */
  description?: string | undefined;
  /**
   * Parameters for the function
   */
  parameters?: { [k: string]: any } | undefined;
};

/**
 * Function calling mode - "none", "auto" or "force"
 */
export const FunctionCallParams = {
  None: "none",
  Auto: "auto",
  Force: "force",
} as const;
/**
 * Function calling mode - "none", "auto" or "force"
 */
export type FunctionCallParams = ClosedEnum<typeof FunctionCallParams>;

export type ParametersT = {
  /**
   * Type of API calling - "chat" or "completion"
   */
  callType: CallType;
  /**
   * Model unique name
   */
  model: string;
  /**
   * Model-specific hyperparameters
   */
  hyperparameters?: { [k: string]: any } | undefined;
  /**
   * Response format for the model with the key "type" and value "text" or "json_object"
   */
  responseFormat?: ResponseFormat | undefined;
  /**
   * List of functions to be called by the model, refer to OpenAI schema for more details
   */
  selectedFunctions?: Array<SelectedFunctions> | undefined;
  /**
   * Function calling mode - "none", "auto" or "force"
   */
  functionCallParams?: FunctionCallParams | undefined;
  /**
   * Force function-specific parameters
   */
  forceFunction?: { [k: string]: any } | undefined;
  additionalProperties: { [k: string]: any };
};

/**
 * Type of the configuration - "LLM" or "pipeline" - "LLM" by default
 */
export const ConfigurationType = {
  Llm: "LLM",
  Pipeline: "pipeline",
} as const;
/**
 * Type of the configuration - "LLM" or "pipeline" - "LLM" by default
 */
export type ConfigurationType = ClosedEnum<typeof ConfigurationType>;

export type Configuration = {
  /**
   * ID of the configuration
   */
  id?: string | undefined;
  /**
   * ID of the project to which this configuration belongs
   */
  project: string;
  /**
   * Name of the configuration
   */
  name: string;
  /**
   * List of environments where the configuration is active
   */
  env?: Array<Env> | undefined;
  /**
   * Name of the provider - "openai", "anthropic", etc.
   */
  provider: string;
  parameters: ParametersT;
  /**
   * Type of the configuration - "LLM" or "pipeline" - "LLM" by default
   */
  type?: ConfigurationType | undefined;
  /**
   * Details of user who created the configuration
   */
  userProperties?: { [k: string]: any } | undefined;
};

/** @internal */
export const Env$inboundSchema: z.ZodNativeEnum<typeof Env> = z.nativeEnum(Env);

/** @internal */
export const Env$outboundSchema: z.ZodNativeEnum<typeof Env> =
  Env$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Env$ {
  /** @deprecated use `Env$inboundSchema` instead. */
  export const inboundSchema = Env$inboundSchema;
  /** @deprecated use `Env$outboundSchema` instead. */
  export const outboundSchema = Env$outboundSchema;
}

/** @internal */
export const CallType$inboundSchema: z.ZodNativeEnum<typeof CallType> = z
  .nativeEnum(CallType);

/** @internal */
export const CallType$outboundSchema: z.ZodNativeEnum<typeof CallType> =
  CallType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallType$ {
  /** @deprecated use `CallType$inboundSchema` instead. */
  export const inboundSchema = CallType$inboundSchema;
  /** @deprecated use `CallType$outboundSchema` instead. */
  export const outboundSchema = CallType$outboundSchema;
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResponseFormat$Outbound = {};

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}

/** @internal */
export const SelectedFunctions$inboundSchema: z.ZodType<
  SelectedFunctions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type SelectedFunctions$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const SelectedFunctions$outboundSchema: z.ZodType<
  SelectedFunctions$Outbound,
  z.ZodTypeDef,
  SelectedFunctions
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectedFunctions$ {
  /** @deprecated use `SelectedFunctions$inboundSchema` instead. */
  export const inboundSchema = SelectedFunctions$inboundSchema;
  /** @deprecated use `SelectedFunctions$outboundSchema` instead. */
  export const outboundSchema = SelectedFunctions$outboundSchema;
  /** @deprecated use `SelectedFunctions$Outbound` instead. */
  export type Outbound = SelectedFunctions$Outbound;
}

export function selectedFunctionsToJSON(
  selectedFunctions: SelectedFunctions,
): string {
  return JSON.stringify(
    SelectedFunctions$outboundSchema.parse(selectedFunctions),
  );
}

export function selectedFunctionsFromJSON(
  jsonString: string,
): SafeParseResult<SelectedFunctions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectedFunctions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectedFunctions' from JSON`,
  );
}

/** @internal */
export const FunctionCallParams$inboundSchema: z.ZodNativeEnum<
  typeof FunctionCallParams
> = z.nativeEnum(FunctionCallParams);

/** @internal */
export const FunctionCallParams$outboundSchema: z.ZodNativeEnum<
  typeof FunctionCallParams
> = FunctionCallParams$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionCallParams$ {
  /** @deprecated use `FunctionCallParams$inboundSchema` instead. */
  export const inboundSchema = FunctionCallParams$inboundSchema;
  /** @deprecated use `FunctionCallParams$outboundSchema` instead. */
  export const outboundSchema = FunctionCallParams$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    call_type: CallType$inboundSchema,
    model: z.string(),
    hyperparameters: z.record(z.any()).optional(),
    responseFormat: z.lazy(() => ResponseFormat$inboundSchema).optional(),
    selectedFunctions: z.array(z.lazy(() => SelectedFunctions$inboundSchema))
      .optional(),
    functionCallParams: FunctionCallParams$inboundSchema.optional(),
    forceFunction: z.record(z.any()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
).transform((v) => {
  return remap$(v, {
    "call_type": "callType",
  });
});

/** @internal */
export type ParametersT$Outbound = {
  call_type: string;
  model: string;
  hyperparameters?: { [k: string]: any } | undefined;
  responseFormat?: ResponseFormat$Outbound | undefined;
  selectedFunctions?: Array<SelectedFunctions$Outbound> | undefined;
  functionCallParams?: string | undefined;
  forceFunction?: { [k: string]: any } | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({
  callType: CallType$outboundSchema,
  model: z.string(),
  hyperparameters: z.record(z.any()).optional(),
  responseFormat: z.lazy(() => ResponseFormat$outboundSchema).optional(),
  selectedFunctions: z.array(z.lazy(() => SelectedFunctions$outboundSchema))
    .optional(),
  functionCallParams: FunctionCallParams$outboundSchema.optional(),
  forceFunction: z.record(z.any()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      callType: "call_type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

export function parametersToJSON(parametersT: ParametersT): string {
  return JSON.stringify(ParametersT$outboundSchema.parse(parametersT));
}

export function parametersFromJSON(
  jsonString: string,
): SafeParseResult<ParametersT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersT' from JSON`,
  );
}

/** @internal */
export const ConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = z.nativeEnum(ConfigurationType);

/** @internal */
export const ConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = ConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationType$ {
  /** @deprecated use `ConfigurationType$inboundSchema` instead. */
  export const inboundSchema = ConfigurationType$inboundSchema;
  /** @deprecated use `ConfigurationType$outboundSchema` instead. */
  export const outboundSchema = ConfigurationType$outboundSchema;
}

/** @internal */
export const Configuration$inboundSchema: z.ZodType<
  Configuration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  project: z.string(),
  name: z.string(),
  env: z.array(Env$inboundSchema).optional(),
  provider: z.string(),
  parameters: z.lazy(() => ParametersT$inboundSchema),
  type: ConfigurationType$inboundSchema.optional(),
  user_properties: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "user_properties": "userProperties",
  });
});

/** @internal */
export type Configuration$Outbound = {
  _id?: string | undefined;
  project: string;
  name: string;
  env?: Array<string> | undefined;
  provider: string;
  parameters: ParametersT$Outbound;
  type?: string | undefined;
  user_properties?: { [k: string]: any } | undefined;
};

/** @internal */
export const Configuration$outboundSchema: z.ZodType<
  Configuration$Outbound,
  z.ZodTypeDef,
  Configuration
> = z.object({
  id: z.string().optional(),
  project: z.string(),
  name: z.string(),
  env: z.array(Env$outboundSchema).optional(),
  provider: z.string(),
  parameters: z.lazy(() => ParametersT$outboundSchema),
  type: ConfigurationType$outboundSchema.optional(),
  userProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    userProperties: "user_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration$ {
  /** @deprecated use `Configuration$inboundSchema` instead. */
  export const inboundSchema = Configuration$inboundSchema;
  /** @deprecated use `Configuration$outboundSchema` instead. */
  export const outboundSchema = Configuration$outboundSchema;
  /** @deprecated use `Configuration$Outbound` instead. */
  export type Outbound = Configuration$Outbound;
}

export function configurationToJSON(configuration: Configuration): string {
  return JSON.stringify(Configuration$outboundSchema.parse(configuration));
}

export function configurationFromJSON(
  jsonString: string,
): SafeParseResult<Configuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProjectRequest = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const CreateProjectRequest$inboundSchema: z.ZodType<
  CreateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type CreateProjectRequest$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const CreateProjectRequest$outboundSchema: z.ZodType<
  CreateProjectRequest$Outbound,
  z.ZodTypeDef,
  CreateProjectRequest
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRequest$ {
  /** @deprecated use `CreateProjectRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRequest$inboundSchema;
  /** @deprecated use `CreateProjectRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRequest$outboundSchema;
  /** @deprecated use `CreateProjectRequest$Outbound` instead. */
  export type Outbound = CreateProjectRequest$Outbound;
}

export function createProjectRequestToJSON(
  createProjectRequest: CreateProjectRequest,
): string {
  return JSON.stringify(
    CreateProjectRequest$outboundSchema.parse(createProjectRequest),
  );
}

export function createProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type CreateModelEvent = {
  /**
   * Project associated with the event
   */
  project: string;
  /**
   * Model name
   */
  model: string;
  /**
   * Model provider
   */
  provider: string;
  /**
   * Messages passed to the model
   */
  messages: Array<{ [k: string]: any }>;
  /**
   * Final output JSON of the event
   */
  response: { [k: string]: any };
  /**
   * How long the event took in milliseconds
   */
  duration: number;
  /**
   * Usage statistics of the model
   */
  usage: { [k: string]: any };
  /**
   * Cost of the model completion
   */
  cost?: number | undefined;
  /**
   * Any error description if event failed
   */
  error?: string | undefined;
  /**
   * Source of the event - production, staging, etc
   */
  source?: string | undefined;
  /**
   * Name of the event
   */
  eventName?: string | undefined;
  /**
   * Hyperparameters used for the model
   */
  hyperparameters?: { [k: string]: any } | undefined;
  /**
   * Template used for the model
   */
  template?: Array<{ [k: string]: any }> | undefined;
  /**
   * Inputs for the template
   */
  templateInputs?: { [k: string]: any } | undefined;
  /**
   * Tools used for the model
   */
  tools?: Array<{ [k: string]: any }> | undefined;
  /**
   * Tool choice for the model
   */
  toolChoice?: string | undefined;
  /**
   * Response format for the model
   */
  responseFormat?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateModelEvent$inboundSchema: z.ZodType<
  CreateModelEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  model: z.string(),
  provider: z.string(),
  messages: z.array(z.record(z.any())),
  response: z.record(z.any()),
  duration: z.number(),
  usage: z.record(z.any()),
  cost: z.number().optional(),
  error: z.string().optional(),
  source: z.string().optional(),
  event_name: z.string().optional(),
  hyperparameters: z.record(z.any()).optional(),
  template: z.array(z.record(z.any())).optional(),
  template_inputs: z.record(z.any()).optional(),
  tools: z.array(z.record(z.any())).optional(),
  tool_choice: z.string().optional(),
  response_format: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "event_name": "eventName",
    "template_inputs": "templateInputs",
    "tool_choice": "toolChoice",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateModelEvent$Outbound = {
  project: string;
  model: string;
  provider: string;
  messages: Array<{ [k: string]: any }>;
  response: { [k: string]: any };
  duration: number;
  usage: { [k: string]: any };
  cost?: number | undefined;
  error?: string | undefined;
  source?: string | undefined;
  event_name?: string | undefined;
  hyperparameters?: { [k: string]: any } | undefined;
  template?: Array<{ [k: string]: any }> | undefined;
  template_inputs?: { [k: string]: any } | undefined;
  tools?: Array<{ [k: string]: any }> | undefined;
  tool_choice?: string | undefined;
  response_format?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateModelEvent$outboundSchema: z.ZodType<
  CreateModelEvent$Outbound,
  z.ZodTypeDef,
  CreateModelEvent
> = z.object({
  project: z.string(),
  model: z.string(),
  provider: z.string(),
  messages: z.array(z.record(z.any())),
  response: z.record(z.any()),
  duration: z.number(),
  usage: z.record(z.any()),
  cost: z.number().optional(),
  error: z.string().optional(),
  source: z.string().optional(),
  eventName: z.string().optional(),
  hyperparameters: z.record(z.any()).optional(),
  template: z.array(z.record(z.any())).optional(),
  templateInputs: z.record(z.any()).optional(),
  tools: z.array(z.record(z.any())).optional(),
  toolChoice: z.string().optional(),
  responseFormat: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    eventName: "event_name",
    templateInputs: "template_inputs",
    toolChoice: "tool_choice",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateModelEvent$ {
  /** @deprecated use `CreateModelEvent$inboundSchema` instead. */
  export const inboundSchema = CreateModelEvent$inboundSchema;
  /** @deprecated use `CreateModelEvent$outboundSchema` instead. */
  export const outboundSchema = CreateModelEvent$outboundSchema;
  /** @deprecated use `CreateModelEvent$Outbound` instead. */
  export type Outbound = CreateModelEvent$Outbound;
}

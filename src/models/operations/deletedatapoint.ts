/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatapointRequest = {
  /**
   * Datapoint ID like `65c13dbbd65fb876b7886cdb`
   */
  id: string;
};

/**
 * Datapoint successfully deleted
 */
export type DeleteDatapointResponseBody = {
  deleted?: boolean | undefined;
};

/** @internal */
export const DeleteDatapointRequest$inboundSchema: z.ZodType<
  DeleteDatapointRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteDatapointRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteDatapointRequest$outboundSchema: z.ZodType<
  DeleteDatapointRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatapointRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatapointRequest$ {
  /** @deprecated use `DeleteDatapointRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatapointRequest$inboundSchema;
  /** @deprecated use `DeleteDatapointRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatapointRequest$outboundSchema;
  /** @deprecated use `DeleteDatapointRequest$Outbound` instead. */
  export type Outbound = DeleteDatapointRequest$Outbound;
}

export function deleteDatapointRequestToJSON(
  deleteDatapointRequest: DeleteDatapointRequest,
): string {
  return JSON.stringify(
    DeleteDatapointRequest$outboundSchema.parse(deleteDatapointRequest),
  );
}

export function deleteDatapointRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatapointRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatapointRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatapointRequest' from JSON`,
  );
}

/** @internal */
export const DeleteDatapointResponseBody$inboundSchema: z.ZodType<
  DeleteDatapointResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted: z.boolean().optional(),
});

/** @internal */
export type DeleteDatapointResponseBody$Outbound = {
  deleted?: boolean | undefined;
};

/** @internal */
export const DeleteDatapointResponseBody$outboundSchema: z.ZodType<
  DeleteDatapointResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteDatapointResponseBody
> = z.object({
  deleted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatapointResponseBody$ {
  /** @deprecated use `DeleteDatapointResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteDatapointResponseBody$inboundSchema;
  /** @deprecated use `DeleteDatapointResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteDatapointResponseBody$outboundSchema;
  /** @deprecated use `DeleteDatapointResponseBody$Outbound` instead. */
  export type Outbound = DeleteDatapointResponseBody$Outbound;
}

export function deleteDatapointResponseBodyToJSON(
  deleteDatapointResponseBody: DeleteDatapointResponseBody,
): string {
  return JSON.stringify(
    DeleteDatapointResponseBody$outboundSchema.parse(
      deleteDatapointResponseBody,
    ),
  );
}

export function deleteDatapointResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatapointResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatapointResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatapointResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UpdateEventRequestBody = {
  eventId: string;
  metadata?: { [k: string]: any } | undefined;
  feedback?: { [k: string]: any } | undefined;
  metrics?: { [k: string]: any } | undefined;
  outputs?: { [k: string]: any } | undefined;
  config?: { [k: string]: any } | undefined;
  userProperties?: { [k: string]: any } | undefined;
  duration?: number | undefined;
};

/** @internal */
export const UpdateEventRequestBody$inboundSchema: z.ZodType<
  UpdateEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_id: z.string(),
  metadata: z.record(z.any()).optional(),
  feedback: z.record(z.any()).optional(),
  metrics: z.record(z.any()).optional(),
  outputs: z.record(z.any()).optional(),
  config: z.record(z.any()).optional(),
  user_properties: z.record(z.any()).optional(),
  duration: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_id": "eventId",
    "user_properties": "userProperties",
  });
});

/** @internal */
export type UpdateEventRequestBody$Outbound = {
  event_id: string;
  metadata?: { [k: string]: any } | undefined;
  feedback?: { [k: string]: any } | undefined;
  metrics?: { [k: string]: any } | undefined;
  outputs?: { [k: string]: any } | undefined;
  config?: { [k: string]: any } | undefined;
  user_properties?: { [k: string]: any } | undefined;
  duration?: number | undefined;
};

/** @internal */
export const UpdateEventRequestBody$outboundSchema: z.ZodType<
  UpdateEventRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEventRequestBody
> = z.object({
  eventId: z.string(),
  metadata: z.record(z.any()).optional(),
  feedback: z.record(z.any()).optional(),
  metrics: z.record(z.any()).optional(),
  outputs: z.record(z.any()).optional(),
  config: z.record(z.any()).optional(),
  userProperties: z.record(z.any()).optional(),
  duration: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    eventId: "event_id",
    userProperties: "user_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEventRequestBody$ {
  /** @deprecated use `UpdateEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEventRequestBody$inboundSchema;
  /** @deprecated use `UpdateEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEventRequestBody$outboundSchema;
  /** @deprecated use `UpdateEventRequestBody$Outbound` instead. */
  export type Outbound = UpdateEventRequestBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type DateRange = {
  /**
   * ISO String for start of date time filter like `2024-04-01T22:38:19.000Z`
   */
  dollarGte?: string | undefined;
  /**
   * ISO String for end of date time filter like `2024-04-01T22:38:19.000Z`
   */
  dollarLte?: string | undefined;
};

export type GetEventsRequestBody = {
  /**
   * Name of the project associated with the event like `New Project`
   */
  project: string;
  filters: Array<components.EventFilter>;
  dateRange?: DateRange | undefined;
  /**
   * Fields to include in the response
   */
  projections?: Array<string> | undefined;
  /**
   * Limit number of results to speed up query (default is 1000, max is 7500)
   */
  limit?: number | undefined;
  /**
   * Page number of results (default is 1)
   */
  page?: number | undefined;
};

/**
 * Success
 */
export type GetEventsResponseBody = {
  events?: Array<components.Event> | undefined;
  /**
   * Total number of events in the specified filter
   */
  totalEvents?: number | undefined;
};

/** @internal */
export const DateRange$inboundSchema: z.ZodType<
  DateRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.string().optional(),
  $lte: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
    "$lte": "dollarLte",
  });
});

/** @internal */
export type DateRange$Outbound = {
  $gte?: string | undefined;
  $lte?: string | undefined;
};

/** @internal */
export const DateRange$outboundSchema: z.ZodType<
  DateRange$Outbound,
  z.ZodTypeDef,
  DateRange
> = z.object({
  dollarGte: z.string().optional(),
  dollarLte: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateRange$ {
  /** @deprecated use `DateRange$inboundSchema` instead. */
  export const inboundSchema = DateRange$inboundSchema;
  /** @deprecated use `DateRange$outboundSchema` instead. */
  export const outboundSchema = DateRange$outboundSchema;
  /** @deprecated use `DateRange$Outbound` instead. */
  export type Outbound = DateRange$Outbound;
}

/** @internal */
export const GetEventsRequestBody$inboundSchema: z.ZodType<
  GetEventsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  filters: z.array(components.EventFilter$inboundSchema),
  dateRange: z.lazy(() => DateRange$inboundSchema).optional(),
  projections: z.array(z.string()).optional(),
  limit: z.number().optional(),
  page: z.number().optional(),
});

/** @internal */
export type GetEventsRequestBody$Outbound = {
  project: string;
  filters: Array<components.EventFilter$Outbound>;
  dateRange?: DateRange$Outbound | undefined;
  projections?: Array<string> | undefined;
  limit?: number | undefined;
  page?: number | undefined;
};

/** @internal */
export const GetEventsRequestBody$outboundSchema: z.ZodType<
  GetEventsRequestBody$Outbound,
  z.ZodTypeDef,
  GetEventsRequestBody
> = z.object({
  project: z.string(),
  filters: z.array(components.EventFilter$outboundSchema),
  dateRange: z.lazy(() => DateRange$outboundSchema).optional(),
  projections: z.array(z.string()).optional(),
  limit: z.number().optional(),
  page: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsRequestBody$ {
  /** @deprecated use `GetEventsRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetEventsRequestBody$inboundSchema;
  /** @deprecated use `GetEventsRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetEventsRequestBody$outboundSchema;
  /** @deprecated use `GetEventsRequestBody$Outbound` instead. */
  export type Outbound = GetEventsRequestBody$Outbound;
}

/** @internal */
export const GetEventsResponseBody$inboundSchema: z.ZodType<
  GetEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  events: z.array(components.Event$inboundSchema).optional(),
  totalEvents: z.number().optional(),
});

/** @internal */
export type GetEventsResponseBody$Outbound = {
  events?: Array<components.Event$Outbound> | undefined;
  totalEvents?: number | undefined;
};

/** @internal */
export const GetEventsResponseBody$outboundSchema: z.ZodType<
  GetEventsResponseBody$Outbound,
  z.ZodTypeDef,
  GetEventsResponseBody
> = z.object({
  events: z.array(components.Event$outboundSchema).optional(),
  totalEvents: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsResponseBody$ {
  /** @deprecated use `GetEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetEventsResponseBody$inboundSchema;
  /** @deprecated use `GetEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetEventsResponseBody$outboundSchema;
  /** @deprecated use `GetEventsResponseBody$Outbound` instead. */
  export type Outbound = GetEventsResponseBody$Outbound;
}

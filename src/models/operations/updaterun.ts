/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateRunRequest = {
  runId: string;
  updateRunRequest: components.UpdateRunRequest;
};

/** @internal */
export const UpdateRunRequest$inboundSchema: z.ZodType<
  UpdateRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  run_id: z.string(),
  UpdateRunRequest: components.UpdateRunRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "run_id": "runId",
    "UpdateRunRequest": "updateRunRequest",
  });
});

/** @internal */
export type UpdateRunRequest$Outbound = {
  run_id: string;
  UpdateRunRequest: components.UpdateRunRequest$Outbound;
};

/** @internal */
export const UpdateRunRequest$outboundSchema: z.ZodType<
  UpdateRunRequest$Outbound,
  z.ZodTypeDef,
  UpdateRunRequest
> = z.object({
  runId: z.string(),
  updateRunRequest: components.UpdateRunRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    runId: "run_id",
    updateRunRequest: "UpdateRunRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunRequest$ {
  /** @deprecated use `UpdateRunRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRunRequest$inboundSchema;
  /** @deprecated use `UpdateRunRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRunRequest$outboundSchema;
  /** @deprecated use `UpdateRunRequest$Outbound` instead. */
  export type Outbound = UpdateRunRequest$Outbound;
}

export function updateRunRequestToJSON(
  updateRunRequest: UpdateRunRequest,
): string {
  return JSON.stringify(
    UpdateRunRequest$outboundSchema.parse(updateRunRequest),
  );
}

export function updateRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunRequest' from JSON`,
  );
}

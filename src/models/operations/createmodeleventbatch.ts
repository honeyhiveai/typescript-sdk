/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateModelEventBatchRequestBody = {
  modelEvents?: Array<components.CreateModelEvent> | undefined;
  /**
   * Default is false. If true, all events will be associated with the same session
   */
  isSingleSession?: boolean | undefined;
  sessionProperties?: components.SessionPropertiesBatch | undefined;
};

/**
 * Model events created
 */
export type CreateModelEventBatchResponseBody = {
  eventIds?: Array<string> | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const CreateModelEventBatchRequestBody$inboundSchema: z.ZodType<
  CreateModelEventBatchRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_events: z.array(components.CreateModelEvent$inboundSchema).optional(),
  is_single_session: z.boolean().optional(),
  session_properties: components.SessionPropertiesBatch$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "model_events": "modelEvents",
    "is_single_session": "isSingleSession",
    "session_properties": "sessionProperties",
  });
});

/** @internal */
export type CreateModelEventBatchRequestBody$Outbound = {
  model_events?: Array<components.CreateModelEvent$Outbound> | undefined;
  is_single_session?: boolean | undefined;
  session_properties?: components.SessionPropertiesBatch$Outbound | undefined;
};

/** @internal */
export const CreateModelEventBatchRequestBody$outboundSchema: z.ZodType<
  CreateModelEventBatchRequestBody$Outbound,
  z.ZodTypeDef,
  CreateModelEventBatchRequestBody
> = z.object({
  modelEvents: z.array(components.CreateModelEvent$outboundSchema).optional(),
  isSingleSession: z.boolean().optional(),
  sessionProperties: components.SessionPropertiesBatch$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    modelEvents: "model_events",
    isSingleSession: "is_single_session",
    sessionProperties: "session_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateModelEventBatchRequestBody$ {
  /** @deprecated use `CreateModelEventBatchRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateModelEventBatchRequestBody$inboundSchema;
  /** @deprecated use `CreateModelEventBatchRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateModelEventBatchRequestBody$outboundSchema;
  /** @deprecated use `CreateModelEventBatchRequestBody$Outbound` instead. */
  export type Outbound = CreateModelEventBatchRequestBody$Outbound;
}

export function createModelEventBatchRequestBodyToJSON(
  createModelEventBatchRequestBody: CreateModelEventBatchRequestBody,
): string {
  return JSON.stringify(
    CreateModelEventBatchRequestBody$outboundSchema.parse(
      createModelEventBatchRequestBody,
    ),
  );
}

export function createModelEventBatchRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateModelEventBatchRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateModelEventBatchRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateModelEventBatchRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateModelEventBatchResponseBody$inboundSchema: z.ZodType<
  CreateModelEventBatchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_ids: z.array(z.string()).optional(),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_ids": "eventIds",
  });
});

/** @internal */
export type CreateModelEventBatchResponseBody$Outbound = {
  event_ids?: Array<string> | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const CreateModelEventBatchResponseBody$outboundSchema: z.ZodType<
  CreateModelEventBatchResponseBody$Outbound,
  z.ZodTypeDef,
  CreateModelEventBatchResponseBody
> = z.object({
  eventIds: z.array(z.string()).optional(),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    eventIds: "event_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateModelEventBatchResponseBody$ {
  /** @deprecated use `CreateModelEventBatchResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateModelEventBatchResponseBody$inboundSchema;
  /** @deprecated use `CreateModelEventBatchResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateModelEventBatchResponseBody$outboundSchema;
  /** @deprecated use `CreateModelEventBatchResponseBody$Outbound` instead. */
  export type Outbound = CreateModelEventBatchResponseBody$Outbound;
}

export function createModelEventBatchResponseBodyToJSON(
  createModelEventBatchResponseBody: CreateModelEventBatchResponseBody,
): string {
  return JSON.stringify(
    CreateModelEventBatchResponseBody$outboundSchema.parse(
      createModelEventBatchResponseBody,
    ),
  );
}

export function createModelEventBatchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateModelEventBatchResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateModelEventBatchResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateModelEventBatchResponseBody' from JSON`,
  );
}

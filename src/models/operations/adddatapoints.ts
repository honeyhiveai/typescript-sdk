/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Mapping of keys in the data object to be used as inputs, ground truth, and history, everything else goes into metadata
 */
export type Mapping = {
  /**
   * List of keys in the data object to be used as inputs
   */
  inputs: Array<string>;
  /**
   * List of keys in the data object to be used as ground truth
   */
  groundTruth: Array<string>;
  /**
   * List of keys in the data object to be used as chat history, can be empty list if not needed
   */
  history: Array<string>;
};

export type AddDatapointsRequestBody = {
  /**
   * Name of the project associated with this dataset like `New Project`
   */
  project: string;
  /**
   * List of JSON objects to be added as datapoints
   */
  data: Array<{ [k: string]: any }>;
  /**
   * Mapping of keys in the data object to be used as inputs, ground truth, and history, everything else goes into metadata
   */
  mapping: Mapping;
};

export type AddDatapointsRequest = {
  /**
   * The unique identifier of the dataset to add datapoints to like  `663876ec4611c47f4970f0c3`
   */
  datasetId: string;
  requestBody: AddDatapointsRequestBody;
};

/**
 * Successful addition
 */
export type AddDatapointsResponseBody = {
  inserted?: boolean | undefined;
  /**
   * List of unique datapoint ids added to the dataset
   */
  datapointIds?: Array<string> | undefined;
};

/** @internal */
export const Mapping$inboundSchema: z.ZodType<Mapping, z.ZodTypeDef, unknown> =
  z.object({
    inputs: z.array(z.string()),
    ground_truth: z.array(z.string()),
    history: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "ground_truth": "groundTruth",
    });
  });

/** @internal */
export type Mapping$Outbound = {
  inputs: Array<string>;
  ground_truth: Array<string>;
  history: Array<string>;
};

/** @internal */
export const Mapping$outboundSchema: z.ZodType<
  Mapping$Outbound,
  z.ZodTypeDef,
  Mapping
> = z.object({
  inputs: z.array(z.string()),
  groundTruth: z.array(z.string()),
  history: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    groundTruth: "ground_truth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mapping$ {
  /** @deprecated use `Mapping$inboundSchema` instead. */
  export const inboundSchema = Mapping$inboundSchema;
  /** @deprecated use `Mapping$outboundSchema` instead. */
  export const outboundSchema = Mapping$outboundSchema;
  /** @deprecated use `Mapping$Outbound` instead. */
  export type Outbound = Mapping$Outbound;
}

export function mappingToJSON(mapping: Mapping): string {
  return JSON.stringify(Mapping$outboundSchema.parse(mapping));
}

export function mappingFromJSON(
  jsonString: string,
): SafeParseResult<Mapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mapping' from JSON`,
  );
}

/** @internal */
export const AddDatapointsRequestBody$inboundSchema: z.ZodType<
  AddDatapointsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  data: z.array(z.record(z.any())),
  mapping: z.lazy(() => Mapping$inboundSchema),
});

/** @internal */
export type AddDatapointsRequestBody$Outbound = {
  project: string;
  data: Array<{ [k: string]: any }>;
  mapping: Mapping$Outbound;
};

/** @internal */
export const AddDatapointsRequestBody$outboundSchema: z.ZodType<
  AddDatapointsRequestBody$Outbound,
  z.ZodTypeDef,
  AddDatapointsRequestBody
> = z.object({
  project: z.string(),
  data: z.array(z.record(z.any())),
  mapping: z.lazy(() => Mapping$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDatapointsRequestBody$ {
  /** @deprecated use `AddDatapointsRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddDatapointsRequestBody$inboundSchema;
  /** @deprecated use `AddDatapointsRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddDatapointsRequestBody$outboundSchema;
  /** @deprecated use `AddDatapointsRequestBody$Outbound` instead. */
  export type Outbound = AddDatapointsRequestBody$Outbound;
}

export function addDatapointsRequestBodyToJSON(
  addDatapointsRequestBody: AddDatapointsRequestBody,
): string {
  return JSON.stringify(
    AddDatapointsRequestBody$outboundSchema.parse(addDatapointsRequestBody),
  );
}

export function addDatapointsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddDatapointsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddDatapointsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddDatapointsRequestBody' from JSON`,
  );
}

/** @internal */
export const AddDatapointsRequest$inboundSchema: z.ZodType<
  AddDatapointsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  RequestBody: z.lazy(() => AddDatapointsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddDatapointsRequest$Outbound = {
  dataset_id: string;
  RequestBody: AddDatapointsRequestBody$Outbound;
};

/** @internal */
export const AddDatapointsRequest$outboundSchema: z.ZodType<
  AddDatapointsRequest$Outbound,
  z.ZodTypeDef,
  AddDatapointsRequest
> = z.object({
  datasetId: z.string(),
  requestBody: z.lazy(() => AddDatapointsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDatapointsRequest$ {
  /** @deprecated use `AddDatapointsRequest$inboundSchema` instead. */
  export const inboundSchema = AddDatapointsRequest$inboundSchema;
  /** @deprecated use `AddDatapointsRequest$outboundSchema` instead. */
  export const outboundSchema = AddDatapointsRequest$outboundSchema;
  /** @deprecated use `AddDatapointsRequest$Outbound` instead. */
  export type Outbound = AddDatapointsRequest$Outbound;
}

export function addDatapointsRequestToJSON(
  addDatapointsRequest: AddDatapointsRequest,
): string {
  return JSON.stringify(
    AddDatapointsRequest$outboundSchema.parse(addDatapointsRequest),
  );
}

export function addDatapointsRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddDatapointsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddDatapointsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddDatapointsRequest' from JSON`,
  );
}

/** @internal */
export const AddDatapointsResponseBody$inboundSchema: z.ZodType<
  AddDatapointsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  inserted: z.boolean().optional(),
  datapoint_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "datapoint_ids": "datapointIds",
  });
});

/** @internal */
export type AddDatapointsResponseBody$Outbound = {
  inserted?: boolean | undefined;
  datapoint_ids?: Array<string> | undefined;
};

/** @internal */
export const AddDatapointsResponseBody$outboundSchema: z.ZodType<
  AddDatapointsResponseBody$Outbound,
  z.ZodTypeDef,
  AddDatapointsResponseBody
> = z.object({
  inserted: z.boolean().optional(),
  datapointIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    datapointIds: "datapoint_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDatapointsResponseBody$ {
  /** @deprecated use `AddDatapointsResponseBody$inboundSchema` instead. */
  export const inboundSchema = AddDatapointsResponseBody$inboundSchema;
  /** @deprecated use `AddDatapointsResponseBody$outboundSchema` instead. */
  export const outboundSchema = AddDatapointsResponseBody$outboundSchema;
  /** @deprecated use `AddDatapointsResponseBody$Outbound` instead. */
  export type Outbound = AddDatapointsResponseBody$Outbound;
}

export function addDatapointsResponseBodyToJSON(
  addDatapointsResponseBody: AddDatapointsResponseBody,
): string {
  return JSON.stringify(
    AddDatapointsResponseBody$outboundSchema.parse(addDatapointsResponseBody),
  );
}

export function addDatapointsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddDatapointsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddDatapointsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddDatapointsResponseBody' from JSON`,
  );
}

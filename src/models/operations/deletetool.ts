/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type DeleteToolRequest = {
    functionId: string;
};

/** @internal */
export const DeleteToolRequest$inboundSchema: z.ZodType<DeleteToolRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            function_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                function_id: "functionId",
            });
        });

/** @internal */
export type DeleteToolRequest$Outbound = {
    function_id: string;
};

/** @internal */
export const DeleteToolRequest$outboundSchema: z.ZodType<
    DeleteToolRequest$Outbound,
    z.ZodTypeDef,
    DeleteToolRequest
> = z
    .object({
        functionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            functionId: "function_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteToolRequest$ {
    /** @deprecated use `DeleteToolRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteToolRequest$inboundSchema;
    /** @deprecated use `DeleteToolRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteToolRequest$outboundSchema;
    /** @deprecated use `DeleteToolRequest$Outbound` instead. */
    export type Outbound = DeleteToolRequest$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AggregateFunction = {
  Average: "average",
  Min: "min",
  Max: "max",
  Median: "median",
  P95: "p95",
  P99: "p99",
  P90: "p90",
  Sum: "sum",
  Count: "count",
} as const;
export type AggregateFunction = ClosedEnum<typeof AggregateFunction>;

export type GetExperimentResultRequest = {
  runId: string;
  projectId: string;
  aggregateFunction?: AggregateFunction | undefined;
};

/** @internal */
export const AggregateFunction$inboundSchema: z.ZodNativeEnum<
  typeof AggregateFunction
> = z.nativeEnum(AggregateFunction);

/** @internal */
export const AggregateFunction$outboundSchema: z.ZodNativeEnum<
  typeof AggregateFunction
> = AggregateFunction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AggregateFunction$ {
  /** @deprecated use `AggregateFunction$inboundSchema` instead. */
  export const inboundSchema = AggregateFunction$inboundSchema;
  /** @deprecated use `AggregateFunction$outboundSchema` instead. */
  export const outboundSchema = AggregateFunction$outboundSchema;
}

/** @internal */
export const GetExperimentResultRequest$inboundSchema: z.ZodType<
  GetExperimentResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  run_id: z.string(),
  project_id: z.string(),
  aggregate_function: AggregateFunction$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "run_id": "runId",
    "project_id": "projectId",
    "aggregate_function": "aggregateFunction",
  });
});

/** @internal */
export type GetExperimentResultRequest$Outbound = {
  run_id: string;
  project_id: string;
  aggregate_function?: string | undefined;
};

/** @internal */
export const GetExperimentResultRequest$outboundSchema: z.ZodType<
  GetExperimentResultRequest$Outbound,
  z.ZodTypeDef,
  GetExperimentResultRequest
> = z.object({
  runId: z.string(),
  projectId: z.string(),
  aggregateFunction: AggregateFunction$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    runId: "run_id",
    projectId: "project_id",
    aggregateFunction: "aggregate_function",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExperimentResultRequest$ {
  /** @deprecated use `GetExperimentResultRequest$inboundSchema` instead. */
  export const inboundSchema = GetExperimentResultRequest$inboundSchema;
  /** @deprecated use `GetExperimentResultRequest$outboundSchema` instead. */
  export const outboundSchema = GetExperimentResultRequest$outboundSchema;
  /** @deprecated use `GetExperimentResultRequest$Outbound` instead. */
  export type Outbound = GetExperimentResultRequest$Outbound;
}

export function getExperimentResultRequestToJSON(
  getExperimentResultRequest: GetExperimentResultRequest,
): string {
  return JSON.stringify(
    GetExperimentResultRequest$outboundSchema.parse(getExperimentResultRequest),
  );
}

export function getExperimentResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetExperimentResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetExperimentResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetExperimentResultRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const QueryParamAggregateFunction = {
  Average: "average",
  Min: "min",
  Max: "max",
  Median: "median",
  P95: "p95",
  P99: "p99",
  P90: "p90",
  Sum: "sum",
  Count: "count",
} as const;
export type QueryParamAggregateFunction = ClosedEnum<
  typeof QueryParamAggregateFunction
>;

export type GetExperimentComparisonRequest = {
  runId1: string;
  runId2: string;
  projectId: string;
  aggregateFunction?: QueryParamAggregateFunction | undefined;
};

/** @internal */
export const QueryParamAggregateFunction$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamAggregateFunction
> = z.nativeEnum(QueryParamAggregateFunction);

/** @internal */
export const QueryParamAggregateFunction$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamAggregateFunction
> = QueryParamAggregateFunction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamAggregateFunction$ {
  /** @deprecated use `QueryParamAggregateFunction$inboundSchema` instead. */
  export const inboundSchema = QueryParamAggregateFunction$inboundSchema;
  /** @deprecated use `QueryParamAggregateFunction$outboundSchema` instead. */
  export const outboundSchema = QueryParamAggregateFunction$outboundSchema;
}

/** @internal */
export const GetExperimentComparisonRequest$inboundSchema: z.ZodType<
  GetExperimentComparisonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  run_id_1: z.string(),
  run_id_2: z.string(),
  project_id: z.string(),
  aggregate_function: QueryParamAggregateFunction$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "run_id_1": "runId1",
    "run_id_2": "runId2",
    "project_id": "projectId",
    "aggregate_function": "aggregateFunction",
  });
});

/** @internal */
export type GetExperimentComparisonRequest$Outbound = {
  run_id_1: string;
  run_id_2: string;
  project_id: string;
  aggregate_function?: string | undefined;
};

/** @internal */
export const GetExperimentComparisonRequest$outboundSchema: z.ZodType<
  GetExperimentComparisonRequest$Outbound,
  z.ZodTypeDef,
  GetExperimentComparisonRequest
> = z.object({
  runId1: z.string(),
  runId2: z.string(),
  projectId: z.string(),
  aggregateFunction: QueryParamAggregateFunction$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    runId1: "run_id_1",
    runId2: "run_id_2",
    projectId: "project_id",
    aggregateFunction: "aggregate_function",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExperimentComparisonRequest$ {
  /** @deprecated use `GetExperimentComparisonRequest$inboundSchema` instead. */
  export const inboundSchema = GetExperimentComparisonRequest$inboundSchema;
  /** @deprecated use `GetExperimentComparisonRequest$outboundSchema` instead. */
  export const outboundSchema = GetExperimentComparisonRequest$outboundSchema;
  /** @deprecated use `GetExperimentComparisonRequest$Outbound` instead. */
  export type Outbound = GetExperimentComparisonRequest$Outbound;
}

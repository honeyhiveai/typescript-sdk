/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartSessionRequestBody = {
  session?: components.SessionStartRequest | undefined;
};

/**
 * Session successfully started
 */
export type StartSessionResponseBody = {
  sessionId?: string | undefined;
};

/** @internal */
export const StartSessionRequestBody$inboundSchema: z.ZodType<
  StartSessionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  session: components.SessionStartRequest$inboundSchema.optional(),
});

/** @internal */
export type StartSessionRequestBody$Outbound = {
  session?: components.SessionStartRequest$Outbound | undefined;
};

/** @internal */
export const StartSessionRequestBody$outboundSchema: z.ZodType<
  StartSessionRequestBody$Outbound,
  z.ZodTypeDef,
  StartSessionRequestBody
> = z.object({
  session: components.SessionStartRequest$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartSessionRequestBody$ {
  /** @deprecated use `StartSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = StartSessionRequestBody$inboundSchema;
  /** @deprecated use `StartSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = StartSessionRequestBody$outboundSchema;
  /** @deprecated use `StartSessionRequestBody$Outbound` instead. */
  export type Outbound = StartSessionRequestBody$Outbound;
}

export function startSessionRequestBodyToJSON(
  startSessionRequestBody: StartSessionRequestBody,
): string {
  return JSON.stringify(
    StartSessionRequestBody$outboundSchema.parse(startSessionRequestBody),
  );
}

export function startSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartSessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartSessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const StartSessionResponseBody$inboundSchema: z.ZodType<
  StartSessionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type StartSessionResponseBody$Outbound = {
  session_id?: string | undefined;
};

/** @internal */
export const StartSessionResponseBody$outboundSchema: z.ZodType<
  StartSessionResponseBody$Outbound,
  z.ZodTypeDef,
  StartSessionResponseBody
> = z.object({
  sessionId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartSessionResponseBody$ {
  /** @deprecated use `StartSessionResponseBody$inboundSchema` instead. */
  export const inboundSchema = StartSessionResponseBody$inboundSchema;
  /** @deprecated use `StartSessionResponseBody$outboundSchema` instead. */
  export const outboundSchema = StartSessionResponseBody$outboundSchema;
  /** @deprecated use `StartSessionResponseBody$Outbound` instead. */
  export type Outbound = StartSessionResponseBody$Outbound;
}

export function startSessionResponseBodyToJSON(
  startSessionResponseBody: StartSessionResponseBody,
): string {
  return JSON.stringify(
    StartSessionResponseBody$outboundSchema.parse(startSessionResponseBody),
  );
}

export function startSessionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartSessionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartSessionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartSessionResponseBody' from JSON`,
  );
}

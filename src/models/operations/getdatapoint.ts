/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDatapointRequest = {
  /**
   * Datapoint ID like `65c13dbbd65fb876b7886cdb`
   */
  id: string;
};

/**
 * Successful response
 */
export type GetDatapointResponseBody = {
  datapoint?: Array<components.Datapoint> | undefined;
};

/** @internal */
export const GetDatapointRequest$inboundSchema: z.ZodType<
  GetDatapointRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetDatapointRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetDatapointRequest$outboundSchema: z.ZodType<
  GetDatapointRequest$Outbound,
  z.ZodTypeDef,
  GetDatapointRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatapointRequest$ {
  /** @deprecated use `GetDatapointRequest$inboundSchema` instead. */
  export const inboundSchema = GetDatapointRequest$inboundSchema;
  /** @deprecated use `GetDatapointRequest$outboundSchema` instead. */
  export const outboundSchema = GetDatapointRequest$outboundSchema;
  /** @deprecated use `GetDatapointRequest$Outbound` instead. */
  export type Outbound = GetDatapointRequest$Outbound;
}

export function getDatapointRequestToJSON(
  getDatapointRequest: GetDatapointRequest,
): string {
  return JSON.stringify(
    GetDatapointRequest$outboundSchema.parse(getDatapointRequest),
  );
}

export function getDatapointRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDatapointRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDatapointRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDatapointRequest' from JSON`,
  );
}

/** @internal */
export const GetDatapointResponseBody$inboundSchema: z.ZodType<
  GetDatapointResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  datapoint: z.array(components.Datapoint$inboundSchema).optional(),
});

/** @internal */
export type GetDatapointResponseBody$Outbound = {
  datapoint?: Array<components.Datapoint$Outbound> | undefined;
};

/** @internal */
export const GetDatapointResponseBody$outboundSchema: z.ZodType<
  GetDatapointResponseBody$Outbound,
  z.ZodTypeDef,
  GetDatapointResponseBody
> = z.object({
  datapoint: z.array(components.Datapoint$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatapointResponseBody$ {
  /** @deprecated use `GetDatapointResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDatapointResponseBody$inboundSchema;
  /** @deprecated use `GetDatapointResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDatapointResponseBody$outboundSchema;
  /** @deprecated use `GetDatapointResponseBody$Outbound` instead. */
  export type Outbound = GetDatapointResponseBody$Outbound;
}

export function getDatapointResponseBodyToJSON(
  getDatapointResponseBody: GetDatapointResponseBody,
): string {
  return JSON.stringify(
    GetDatapointResponseBody$outboundSchema.parse(getDatapointResponseBody),
  );
}

export function getDatapointResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDatapointResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDatapointResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDatapointResponseBody' from JSON`,
  );
}

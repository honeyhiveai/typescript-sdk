/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetDatapointsRequest = {
    /**
     * Project name to filter datapoints
     */
    project: string;
    /**
     * List of datapoint ids to fetch
     */
    datapointIds?: Array<string> | undefined;
    /**
     * Name of the dataset to get datapoints from
     */
    datasetName?: string | undefined;
};

/**
 * Successful response
 */
export type GetDatapointsResponseBody = {
    datapoints?: Array<components.Datapoint> | undefined;
};

/** @internal */
export const GetDatapointsRequest$inboundSchema: z.ZodType<
    GetDatapointsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        project: z.string(),
        datapoint_ids: z.array(z.string()).optional(),
        dataset_name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            datapoint_ids: "datapointIds",
            dataset_name: "datasetName",
        });
    });

/** @internal */
export type GetDatapointsRequest$Outbound = {
    project: string;
    datapoint_ids?: Array<string> | undefined;
    dataset_name?: string | undefined;
};

/** @internal */
export const GetDatapointsRequest$outboundSchema: z.ZodType<
    GetDatapointsRequest$Outbound,
    z.ZodTypeDef,
    GetDatapointsRequest
> = z
    .object({
        project: z.string(),
        datapointIds: z.array(z.string()).optional(),
        datasetName: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            datapointIds: "datapoint_ids",
            datasetName: "dataset_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatapointsRequest$ {
    /** @deprecated use `GetDatapointsRequest$inboundSchema` instead. */
    export const inboundSchema = GetDatapointsRequest$inboundSchema;
    /** @deprecated use `GetDatapointsRequest$outboundSchema` instead. */
    export const outboundSchema = GetDatapointsRequest$outboundSchema;
    /** @deprecated use `GetDatapointsRequest$Outbound` instead. */
    export type Outbound = GetDatapointsRequest$Outbound;
}

/** @internal */
export const GetDatapointsResponseBody$inboundSchema: z.ZodType<
    GetDatapointsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    datapoints: z.array(components.Datapoint$inboundSchema).optional(),
});

/** @internal */
export type GetDatapointsResponseBody$Outbound = {
    datapoints?: Array<components.Datapoint$Outbound> | undefined;
};

/** @internal */
export const GetDatapointsResponseBody$outboundSchema: z.ZodType<
    GetDatapointsResponseBody$Outbound,
    z.ZodTypeDef,
    GetDatapointsResponseBody
> = z.object({
    datapoints: z.array(components.Datapoint$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatapointsResponseBody$ {
    /** @deprecated use `GetDatapointsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetDatapointsResponseBody$inboundSchema;
    /** @deprecated use `GetDatapointsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetDatapointsResponseBody$outboundSchema;
    /** @deprecated use `GetDatapointsResponseBody$Outbound` instead. */
    export type Outbound = GetDatapointsResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateEventBatchRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: components.CreateEventRequest })
    @Expose({ name: "events" })
    @Type(() => components.CreateEventRequest)
    events: components.CreateEventRequest[];

    /**
     * Default is false. If true, all events will be associated with the same session
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_single_session" })
    isSingleSession?: boolean;
}

/**
 * Events created
 */
export class CreateEventBatchResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "event_ids" })
    eventIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "session_id" })
    sessionId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "success" })
    success?: boolean;
}

export class CreateEventBatchResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Events created
     */
    @SpeakeasyMetadata()
    object?: CreateEventBatchResponseBody;
}

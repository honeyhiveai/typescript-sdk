/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SessionProperties = {
  modelEvent?: components.SessionPropertiesBatch | undefined;
};

export type CreateEventBatchRequestBody = {
  events: Array<components.CreateEventRequest>;
  /**
   * Default is false. If true, all events will be associated with the same session
   */
  isSingleSession?: boolean | undefined;
  sessionProperties?: SessionProperties | undefined;
};

/**
 * Events created
 */
export type CreateEventBatchResponseBody = {
  eventIds?: Array<string> | undefined;
  sessionId?: string | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const SessionProperties$inboundSchema: z.ZodType<
  SessionProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_event: components.SessionPropertiesBatch$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "model_event": "modelEvent",
  });
});

/** @internal */
export type SessionProperties$Outbound = {
  model_event?: components.SessionPropertiesBatch$Outbound | undefined;
};

/** @internal */
export const SessionProperties$outboundSchema: z.ZodType<
  SessionProperties$Outbound,
  z.ZodTypeDef,
  SessionProperties
> = z.object({
  modelEvent: components.SessionPropertiesBatch$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    modelEvent: "model_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionProperties$ {
  /** @deprecated use `SessionProperties$inboundSchema` instead. */
  export const inboundSchema = SessionProperties$inboundSchema;
  /** @deprecated use `SessionProperties$outboundSchema` instead. */
  export const outboundSchema = SessionProperties$outboundSchema;
  /** @deprecated use `SessionProperties$Outbound` instead. */
  export type Outbound = SessionProperties$Outbound;
}

/** @internal */
export const CreateEventBatchRequestBody$inboundSchema: z.ZodType<
  CreateEventBatchRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  events: z.array(components.CreateEventRequest$inboundSchema),
  is_single_session: z.boolean().optional(),
  session_properties: z.lazy(() => SessionProperties$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_single_session": "isSingleSession",
    "session_properties": "sessionProperties",
  });
});

/** @internal */
export type CreateEventBatchRequestBody$Outbound = {
  events: Array<components.CreateEventRequest$Outbound>;
  is_single_session?: boolean | undefined;
  session_properties?: SessionProperties$Outbound | undefined;
};

/** @internal */
export const CreateEventBatchRequestBody$outboundSchema: z.ZodType<
  CreateEventBatchRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEventBatchRequestBody
> = z.object({
  events: z.array(components.CreateEventRequest$outboundSchema),
  isSingleSession: z.boolean().optional(),
  sessionProperties: z.lazy(() => SessionProperties$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    isSingleSession: "is_single_session",
    sessionProperties: "session_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventBatchRequestBody$ {
  /** @deprecated use `CreateEventBatchRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEventBatchRequestBody$inboundSchema;
  /** @deprecated use `CreateEventBatchRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEventBatchRequestBody$outboundSchema;
  /** @deprecated use `CreateEventBatchRequestBody$Outbound` instead. */
  export type Outbound = CreateEventBatchRequestBody$Outbound;
}

/** @internal */
export const CreateEventBatchResponseBody$inboundSchema: z.ZodType<
  CreateEventBatchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_ids: z.array(z.string()).optional(),
  session_id: z.string().optional(),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_ids": "eventIds",
    "session_id": "sessionId",
  });
});

/** @internal */
export type CreateEventBatchResponseBody$Outbound = {
  event_ids?: Array<string> | undefined;
  session_id?: string | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const CreateEventBatchResponseBody$outboundSchema: z.ZodType<
  CreateEventBatchResponseBody$Outbound,
  z.ZodTypeDef,
  CreateEventBatchResponseBody
> = z.object({
  eventIds: z.array(z.string()).optional(),
  sessionId: z.string().optional(),
  success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    eventIds: "event_ids",
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventBatchResponseBody$ {
  /** @deprecated use `CreateEventBatchResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateEventBatchResponseBody$inboundSchema;
  /** @deprecated use `CreateEventBatchResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateEventBatchResponseBody$outboundSchema;
  /** @deprecated use `CreateEventBatchResponseBody$Outbound` instead. */
  export type Outbound = CreateEventBatchResponseBody$Outbound;
}

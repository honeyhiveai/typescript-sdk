/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Events partially created
 */
export type CreateEventBatchResponseBodyData = {
    eventIds?: Array<string> | undefined;
    errors?: Array<string> | undefined;
    success?: boolean | undefined;
};

/**
 * Events partially created
 */
export class CreateEventBatchResponseBody extends Error {
    eventIds?: Array<string> | undefined;
    errors?: Array<string> | undefined;
    success?: boolean | undefined;

    /** The original data that was passed to this error instance. */
    data$: CreateEventBatchResponseBodyData;

    constructor(err: CreateEventBatchResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.eventIds != null) {
            this.eventIds = err.eventIds;
        }
        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.success != null) {
            this.success = err.success;
        }

        this.name = "CreateEventBatchResponseBody";
    }
}

/** @internal */
export const CreateEventBatchResponseBody$inboundSchema: z.ZodType<
    CreateEventBatchResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        event_ids: z.array(z.string()).optional(),
        errors: z.array(z.string()).optional(),
        success: z.boolean().optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            event_ids: "eventIds",
        });

        return new CreateEventBatchResponseBody(remapped);
    });

/** @internal */
export type CreateEventBatchResponseBody$Outbound = {
    event_ids?: Array<string> | undefined;
    errors?: Array<string> | undefined;
    success?: boolean | undefined;
};

/** @internal */
export const CreateEventBatchResponseBody$outboundSchema: z.ZodType<
    CreateEventBatchResponseBody$Outbound,
    z.ZodTypeDef,
    CreateEventBatchResponseBody
> = z
    .instanceof(CreateEventBatchResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                eventIds: z.array(z.string()).optional(),
                errors: z.array(z.string()).optional(),
                success: z.boolean().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    eventIds: "event_ids",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventBatchResponseBody$ {
    /** @deprecated use `CreateEventBatchResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateEventBatchResponseBody$inboundSchema;
    /** @deprecated use `CreateEventBatchResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateEventBatchResponseBody$outboundSchema;
    /** @deprecated use `CreateEventBatchResponseBody$Outbound` instead. */
    export type Outbound = CreateEventBatchResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsCreateProject } from "../funcs/projectsCreateProject.js";
import { projectsDeleteProject } from "../funcs/projectsDeleteProject.js";
import { projectsGetProjects } from "../funcs/projectsGetProjects.js";
import { projectsUpdateProject } from "../funcs/projectsUpdateProject.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
    /**
     * Get a list of projects
     */
    async getProjects(
        name?: string | undefined,
        options?: RequestOptions
    ): Promise<Array<components.Project>> {
        return unwrapAsync(projectsGetProjects(this, name, options));
    }

    /**
     * Create a new project
     */
    async createProject(
        request: components.CreateProjectRequest,
        options?: RequestOptions
    ): Promise<components.Project> {
        return unwrapAsync(projectsCreateProject(this, request, options));
    }

    /**
     * Update an existing project
     */
    async updateProject(
        request: components.UpdateProjectRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(projectsUpdateProject(this, request, options));
    }

    /**
     * Delete a project
     */
    async deleteProject(name: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(projectsDeleteProject(this, name, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { experimentsCreateRun } from "../funcs/experimentsCreateRun.js";
import { experimentsDeleteRun } from "../funcs/experimentsDeleteRun.js";
import { experimentsGetExperimentComparison } from "../funcs/experimentsGetExperimentComparison.js";
import { experimentsGetExperimentResult } from "../funcs/experimentsGetExperimentResult.js";
import { experimentsGetRun } from "../funcs/experimentsGetRun.js";
import { experimentsGetRuns } from "../funcs/experimentsGetRuns.js";
import { experimentsUpdateRun } from "../funcs/experimentsUpdateRun.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Experiments extends ClientSDK {
  /**
   * Create a new evaluation run
   */
  async createRun(
    request: components.CreateRunRequest,
    options?: RequestOptions,
  ): Promise<components.CreateRunResponse> {
    return unwrapAsync(experimentsCreateRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of evaluation runs
   */
  async getRuns(
    project?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.GetRunsResponse> {
    return unwrapAsync(experimentsGetRuns(
      this,
      project,
      options,
    ));
  }

  /**
   * Get details of an evaluation run
   */
  async getRun(
    runId: string,
    options?: RequestOptions,
  ): Promise<components.GetRunResponse> {
    return unwrapAsync(experimentsGetRun(
      this,
      runId,
      options,
    ));
  }

  /**
   * Update an evaluation run
   */
  async updateRun(
    updateRunRequest: components.UpdateRunRequest,
    runId: string,
    options?: RequestOptions,
  ): Promise<components.UpdateRunResponse> {
    return unwrapAsync(experimentsUpdateRun(
      this,
      updateRunRequest,
      runId,
      options,
    ));
  }

  /**
   * Delete an evaluation run
   */
  async deleteRun(
    runId: string,
    options?: RequestOptions,
  ): Promise<components.DeleteRunResponse> {
    return unwrapAsync(experimentsDeleteRun(
      this,
      runId,
      options,
    ));
  }

  /**
   * Retrieve experiment result
   */
  async getExperimentResult(
    runId: string,
    projectId: string,
    aggregateFunction?: operations.AggregateFunction | undefined,
    options?: RequestOptions,
  ): Promise<components.ExperimentResultResponse> {
    return unwrapAsync(experimentsGetExperimentResult(
      this,
      runId,
      projectId,
      aggregateFunction,
      options,
    ));
  }

  /**
   * Retrieve experiment comparison
   */
  async getExperimentComparison(
    runId1: string,
    runId2: string,
    projectId: string,
    aggregateFunction?: operations.QueryParamAggregateFunction | undefined,
    options?: RequestOptions,
  ): Promise<components.ExperimentComparisonResponse> {
    return unwrapAsync(experimentsGetExperimentComparison(
      this,
      runId1,
      runId2,
      projectId,
      aggregateFunction,
      options,
    ));
  }
}

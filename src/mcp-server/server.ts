/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { HoneyHiveCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope, mcpScopes } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$configurationsCreateConfiguration } from "./tools/configurationsCreateConfiguration.js";
import { tool$configurationsDeleteConfiguration } from "./tools/configurationsDeleteConfiguration.js";
import { tool$configurationsGetConfigurations } from "./tools/configurationsGetConfigurations.js";
import { tool$configurationsUpdateConfiguration } from "./tools/configurationsUpdateConfiguration.js";
import { tool$datapointsCreateDatapoint } from "./tools/datapointsCreateDatapoint.js";
import { tool$datapointsDeleteDatapoint } from "./tools/datapointsDeleteDatapoint.js";
import { tool$datapointsGetDatapoint } from "./tools/datapointsGetDatapoint.js";
import { tool$datapointsGetDatapoints } from "./tools/datapointsGetDatapoints.js";
import { tool$datapointsUpdateDatapoint } from "./tools/datapointsUpdateDatapoint.js";
import { tool$datasetsAddDatapoints } from "./tools/datasetsAddDatapoints.js";
import { tool$datasetsCreateDataset } from "./tools/datasetsCreateDataset.js";
import { tool$datasetsDeleteDataset } from "./tools/datasetsDeleteDataset.js";
import { tool$datasetsGetDatasets } from "./tools/datasetsGetDatasets.js";
import { tool$datasetsUpdateDataset } from "./tools/datasetsUpdateDataset.js";
import { tool$eventsCreateEvent } from "./tools/eventsCreateEvent.js";
import { tool$eventsCreateEventBatch } from "./tools/eventsCreateEventBatch.js";
import { tool$eventsCreateModelEvent } from "./tools/eventsCreateModelEvent.js";
import { tool$eventsCreateModelEventBatch } from "./tools/eventsCreateModelEventBatch.js";
import { tool$eventsGetEvents } from "./tools/eventsGetEvents.js";
import { tool$eventsUpdateEvent } from "./tools/eventsUpdateEvent.js";
import { tool$experimentsCreateRun } from "./tools/experimentsCreateRun.js";
import { tool$experimentsDeleteRun } from "./tools/experimentsDeleteRun.js";
import { tool$experimentsGetExperimentComparison } from "./tools/experimentsGetExperimentComparison.js";
import { tool$experimentsGetExperimentResult } from "./tools/experimentsGetExperimentResult.js";
import { tool$experimentsGetRun } from "./tools/experimentsGetRun.js";
import { tool$experimentsGetRuns } from "./tools/experimentsGetRuns.js";
import { tool$experimentsUpdateRun } from "./tools/experimentsUpdateRun.js";
import { tool$metricsCreateMetric } from "./tools/metricsCreateMetric.js";
import { tool$metricsDeleteMetric } from "./tools/metricsDeleteMetric.js";
import { tool$metricsGetMetrics } from "./tools/metricsGetMetrics.js";
import { tool$metricsUpdateMetric } from "./tools/metricsUpdateMetric.js";
import { tool$projectsCreateProject } from "./tools/projectsCreateProject.js";
import { tool$projectsDeleteProject } from "./tools/projectsDeleteProject.js";
import { tool$projectsGetProjects } from "./tools/projectsGetProjects.js";
import { tool$projectsUpdateProject } from "./tools/projectsUpdateProject.js";
import { tool$sessionGetSession } from "./tools/sessionGetSession.js";
import { tool$sessionStartSession } from "./tools/sessionStartSession.js";
import { tool$toolsCreateTool } from "./tools/toolsCreateTool.js";
import { tool$toolsDeleteTool } from "./tools/toolsDeleteTool.js";
import { tool$toolsGetTools } from "./tools/toolsGetTools.js";
import { tool$toolsUpdateTool } from "./tools/toolsUpdateTool.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  bearerAuth?: SDKOptions["bearerAuth"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "HoneyHive",
    version: "1.34.1",
  });

  const client = new HoneyHiveCore({
    bearerAuth: deps.bearerAuth,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes ?? mcpScopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$sessionStartSession);
  tool(tool$sessionGetSession);
  tool(tool$eventsCreateEvent);
  tool(tool$eventsUpdateEvent);
  tool(tool$eventsGetEvents);
  tool(tool$eventsCreateModelEvent);
  tool(tool$eventsCreateEventBatch);
  tool(tool$eventsCreateModelEventBatch);
  tool(tool$metricsGetMetrics);
  tool(tool$metricsCreateMetric);
  tool(tool$metricsUpdateMetric);
  tool(tool$metricsDeleteMetric);
  tool(tool$toolsGetTools);
  tool(tool$toolsCreateTool);
  tool(tool$toolsUpdateTool);
  tool(tool$toolsDeleteTool);
  tool(tool$datapointsGetDatapoints);
  tool(tool$datapointsCreateDatapoint);
  tool(tool$datapointsGetDatapoint);
  tool(tool$datapointsUpdateDatapoint);
  tool(tool$datapointsDeleteDatapoint);
  tool(tool$datasetsGetDatasets);
  tool(tool$datasetsCreateDataset);
  tool(tool$datasetsUpdateDataset);
  tool(tool$datasetsDeleteDataset);
  tool(tool$datasetsAddDatapoints);
  tool(tool$projectsGetProjects);
  tool(tool$projectsCreateProject);
  tool(tool$projectsUpdateProject);
  tool(tool$projectsDeleteProject);
  tool(tool$experimentsCreateRun);
  tool(tool$experimentsGetRuns);
  tool(tool$experimentsGetRun);
  tool(tool$experimentsUpdateRun);
  tool(tool$experimentsDeleteRun);
  tool(tool$experimentsGetExperimentResult);
  tool(tool$experimentsGetExperimentComparison);
  tool(tool$configurationsGetConfigurations);
  tool(tool$configurationsCreateConfiguration);
  tool(tool$configurationsUpdateConfiguration);
  tool(tool$configurationsDeleteConfiguration);

  return server;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { experimentsGetExperimentComparison } from "../../funcs/experimentsGetExperimentComparison.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  runId1: z.string(),
  runId2: z.string(),
  projectId: z.string(),
  aggregateFunction: operations.QueryParamAggregateFunction$inboundSchema
    .optional(),
};

export const tool$experimentsGetExperimentComparison: ToolDefinition<
  typeof args
> = {
  name: "experiments-get-experiment-comparison",
  description: `Retrieve experiment comparison`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await experimentsGetExperimentComparison(
      client,
      args.runId1,
      args.runId2,
      args.projectId,
      args.aggregateFunction,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};

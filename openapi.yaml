openapi: 3.0.3
info:
  title: HoneyHive API
  version: 1.0.1
servers:
- url: https://api.honeyhive.ai
paths:
  /session/start:
    post:
      summary: Start a new session
      operationId: startSession
      tags:
      - Session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  $ref: '#/components/schemas/SessionStartRequest'
      responses:
        '200':
          description: Session successfully started
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
  /session/{session_id}:
    get:
      summary: Retrieve a session
      operationId: getSession
      tags:
      - Session
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /events:
    post:
      tags:
      - Events
      operationId: createEvent
      summary: Create a new event
      description: Please refer to our instrumentation guide for detailed information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  event_id:
                    type: string
                  success:
                    type: boolean
                example:
                  event_id: 7f22137a-6911-4ed3-bc36-110f1dde6b66
                  success: true
    put:
      tags:
      - Events
      operationId: updateEvent
      summary: Update an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
                feedback:
                  type: object
                  additionalProperties: true
                metrics:
                  type: object
                  additionalProperties: true
                outputs:
                  type: object
                  additionalProperties: true
              required:
              - event_id
            example:
              event_id: 7f22137a-6911-4ed3-bc36-110f1dde6b66
              metadata:
                cost: 8.0e-05
                completion_tokens: 23
                prompt_tokens: 35
                total_tokens: 58
              feedback:
                rating: 5
              metrics:
                num_words: 2
              outputs:
                role: assistant
                content: Hello world
      responses:
        '200':
          description: Event updated
        '400':
          description: Bad request
  /events/export:
    post:
      tags:
      - Events
      operationId: getEvents
      summary: Retrieve events based on filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: string
                  description: UUID of the project associated with the event like
                    `65e0fc2d6a2eb95f55a92cbc`
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/EventFilter'
                dateRange:
                  type: object
                  properties:
                    $gte:
                      type: string
                      description: ISO String for start of date time filter like `2024-04-01T22:38:19.000Z`
                    $lte:
                      type: string
                      description: ISO String for end of date time filter like `2024-04-01T22:38:19.000Z`
                limit:
                  type: number
                  description: Limit number of results to speed up query (default
                    is 1000, max is 7500)
                page:
                  type: number
                  description: Page number of results (default is 1)
              required:
              - project
              - filters
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  totalEvents:
                    type: number
                    description: Total number of events in the specified filter
  /metrics:
    get:
      tags:
      - Metrics
      operationId: getMetrics
      summary: Get all metrics
      description: Retrieve a list of all metrics
      parameters:
      - name: project_name
        in: query
        required: true
        schema:
          type: string
        description: Project name associated with metrics
      responses:
        '200':
          description: A list of metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
    post:
      tags:
      - Metrics
      operationId: createMetric
      summary: Create a new metric
      description: Add a new metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '200':
          description: Metric created successfully
    put:
      tags:
      - Metrics
      operationId: updateMetric
      summary: Update an existing metric
      description: Edit a metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricEdit'
      responses:
        '200':
          description: Metric updated successfully
    delete:
      tags:
      - Metrics
      operationId: deleteMetric
      summary: Delete a metric
      description: Remove a metric
      parameters:
      - name: metric_id
        in: query
        required: true
        schema:
          type: string
          description: Unique identifier of the metric
      responses:
        '200':
          description: Metric deleted successfully
  /tools:
    get:
      tags:
      - Tools
      summary: Retrieve a list of tools
      operationId: getTools
      responses:
        '200':
          description: Successfully retrieved the list of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
    post:
      tags:
      - Tools
      summary: Create a new tool
      operationId: createTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToolRequest'
      responses:
        '200':
          description: Tool successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      insertedId:
                        type: string
    put:
      tags:
      - Tools
      summary: Update an existing tool
      operationId: updateTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToolRequest'
      responses:
        '200':
          description: Successfully updated the tool
    delete:
      tags:
      - Tools
      summary: Delete a tool
      operationId: deleteTool
      parameters:
      - name: function_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted the tool
  /datapoints:
    get:
      summary: Retrieve a list of datapoints
      operationId: getDatapoints
      tags:
      - Datapoints
      parameters:
      - name: project
        in: query
        required: true
        schema:
          type: string
        description: Project ID to filter datapoints
      - name: datapoint_ids
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        description: List of datapoint ids to fetch
      - name: dataset_name
        in: query
        required: false
        schema:
          type: string
        description: Name of the dataset to get datapoints from
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  datapoints:
                    type: array
                    items:
                      $ref: '#/components/schemas/Datapoint'
    post:
      summary: Create a new datapoint
      operationId: createDatapoint
      tags:
      - Datapoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatapointRequest'
      responses:
        '200':
          description: Datapoint successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      insertedId:
                        type: string
  /datapoints/{id}:
    get:
      summary: Retrieve a specific datapoint
      operationId: getDatapoint
      tags:
      - Datapoints
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Datapoint ID like `65c13dbbd65fb876b7886cdb`
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  datapoint:
                    type: array
                    items:
                      $ref: '#/components/schemas/Datapoint'
          description: Successful response
    put:
      summary: Update a specific datapoint
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: ID of datapoint to update
      operationId: updateDatapoint
      tags:
      - Datapoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatapointRequest'
      responses:
        '200':
          description: Datapoint successfully updated
        '400':
          description: Error updating datapoint
    delete:
      summary: Delete a specific datapoint
      operationId: deleteDatapoint
      tags:
      - Datapoints
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Datapoint ID like `65c13dbbd65fb876b7886cdb`
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
              example:
                deleted: true
          description: Datapoint successfully deleted
  /datasets:
    get:
      tags:
      - Datasets
      summary: Get datasets
      operationId: getDatasets
      parameters:
      - in: query
        name: project
        required: true
        schema:
          type: string
        description: Project ID associated with the datasets like `65e0fc2d6a2eb95f55a92cbc`
      - in: query
        name: type
        schema:
          type: string
          enum:
          - evaluation
          - fine-tuning
        description: Type of the dataset - "evaluation" or "fine-tuning"
      - in: query
        name: dataset_id
        schema:
          type: string
        description: Unique dataset ID for filtering specific dataset like `663876ec4611c47f4970f0c3`
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  testcases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
    post:
      tags:
      - Datasets
      operationId: createDataset
      summary: Create a dataset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
      responses:
        '200':
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  inserted:
                    type: boolean
                  result:
                    type: object
                    properties:
                      insertedId:
                        type: string
                        description: UUID for the created dataset
    put:
      tags:
      - Datasets
      operationId: updateDataset
      summary: Update a dataset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetUpdate'
      responses:
        '200':
          description: Successful update
    delete:
      tags:
      - Datasets
      operationId: deleteDataset
      summary: Delete a dataset
      parameters:
      - in: query
        name: dataset_id
        required: true
        schema:
          type: string
        description: The unique identifier of the dataset to be deleted like `663876ec4611c47f4970f0c3`
      responses:
        '200':
          description: Successful delete
  /projects:
    get:
      tags:
      - Projects
      summary: Get a list of projects
      operationId: getProjects
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
      - Projects
      summary: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: The created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      tags:
      - Projects
      summary: Update an existing project
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Successfully updated the project
    delete:
      tags:
      - Projects
      summary: Delete a project
      operationId: deleteProject
      parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Project deleted
  /configurations:
    get:
      summary: Retrieve a list of configurations
      operationId: getConfigurations
      tags:
      - Configurations
      parameters:
      - name: project_name
        in: query
        required: true
        schema:
          type: string
        description: Project name for configuration like `Example Project`
      - name: env
        in: query
        required: false
        schema:
          type: string
          enum:
          - dev
          - staging
          - prod
        description: Environment - "dev", "staging" or "prod"
      - name: name
        in: query
        required: false
        schema:
          type: string
        description: The name of the configuration like `v0`
      responses:
        '200':
          description: An array of configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
    post:
      summary: Create a new configuration
      operationId: createConfiguration
      tags:
      - Configurations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostConfigurationRequest'
      responses:
        '200':
          description: Configuration created successfully
  /configurations/{id}:
    put:
      summary: Update an existing configuration
      operationId: updateConfiguration
      tags:
      - Configurations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Configuration ID like `6638187d505c6812e4043f24`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConfigurationRequest'
      responses:
        '200':
          description: Configuration updated successfully
    delete:
      summary: Delete a configuration
      operationId: deleteConfiguration
      tags:
      - Configurations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Configuration ID like `6638187d505c6812e4043f24`
      responses:
        '200':
          description: Configuration deleted successfully
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    SessionStartRequest:
      type: object
      properties:
        project:
          type: string
          description: Project name associated with the session
        session_name:
          type: string
          description: Name of the session
        source:
          type: string
          description: Source of the session - production, staging, etc
        session_id:
          type: string
          description: Unique id of the session, if not set, it will be auto-generated
        children_ids:
          type: array
          items:
            type: string
          description: Id of events that are nested within the session
        config:
          type: object
          additionalProperties: true
          description: Associated configuration for the session
        inputs:
          type: object
          additionalProperties: true
          description: Input object passed to the session - user query, text blob,
            etc
        outputs:
          type: object
          additionalProperties: true
          description: Final output of the session - completion, chunks, etc
        error:
          type: string
          description: Any error description if session failed
        duration:
          type: number
          description: How long the session took in milliseconds
        user_properties:
          type: object
          additionalProperties: true
          description: Any user properties associated with the session
        metrics:
          type: object
          additionalProperties: true
          description: Any values computed over the output of the session
        feedback:
          type: object
          additionalProperties: true
          description: Any user feedback provided for the session output
        metadata:
          type: object
          additionalProperties: true
          description: Any system or application metadata associated with the session
        start_time:
          type: number
          description: UTC timestamp (in milliseconds) for the session start
        end_time:
          type: integer
          description: UTC timestamp (in milliseconds) for the session end
      required:
      - project
      - session_name
      - source
      example:
        project: Simple RAG Project
        source: playground
        event_type: session
        session_name: Playground Session
        session_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        event_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        parent_id: null
        children_ids:
        - 7f22137a-6911-4ed3-bc36-110f1dde6b66
        inputs:
          context: Hello world
          question: What is in the context?
          chat_history:
          - role: system
            content: 'Answer the user''s question only using provided context.


              Context: Hello world'
          - role: user
            content: What is in the context?
        outputs:
          role: assistant
          content: Hello world
        error: null
        start_time: 1712025501605
        end_time: 1712025499832
        duration: 824.8056
        metrics: {}
        feedback: {}
        metadata: {}
        user_properties:
          user: google-oauth2|111840237613341303366
    Event:
      type: object
      properties:
        project_id:
          type: string
          description: UUID of project associated with the event
        source:
          type: string
          description: Source of the event - production, staging, etc
        event_name:
          type: string
          description: Name of the event
        event_type:
          type: string
          enum:
          - session
          - model
          - tool
          - chain
          description: Specify whether the event is of "session", "model", "tool"
            or "chain" type
        event_id:
          type: string
          description: Unique id of the event, if not set, it will be auto-generated
        session_id:
          type: string
          description: Unique id of the session associated with the event, if not
            set, it will be auto-generated
        parent_id:
          type: string
          description: Id of the parent event if nested
        children_ids:
          type: array
          items:
            type: string
          description: Id of events that are nested within the event
        config:
          type: object
          additionalProperties: true
          description: Associated configuration JSON for the event - model name, vector
            index name, etc
        inputs:
          type: object
          additionalProperties: true
          description: Input JSON given to the event - prompt, chunks, etc
          properties:
            chat_history:
              type: array
              items:
                type: object
                additionalProperties: true
              description: Messages passed to the model
        outputs:
          type: object
          additionalProperties: true
          description: Final output JSON of the event
        error:
          type: string
          description: Any error description if event failed
        start_time:
          type: number
          description: UTC timestamp (in milliseconds) for the event start
        end_time:
          type: integer
          description: UTC timestamp (in milliseconds) for the event end
        duration:
          type: number
          description: How long the event took in milliseconds
        metadata:
          type: object
          additionalProperties: true
          description: Any system or application metadata associated with the event
        feedback:
          type: object
          additionalProperties: true
          description: Any user feedback provided for the event output
        metrics:
          type: object
          additionalProperties: true
          description: Any values computed over the output of the event
        user_properties:
          type: object
          additionalProperties: true
          description: Any user properties associated with the event
      example:
        project_id: 65e0fc2d6a2eb95f55a92cbc
        source: playground
        session_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        event_id: 7f22137a-6911-4ed3-bc36-110f1dde6b66
        parent_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        event_type: model
        event_name: Model Completion
        config:
          model: gpt-3.5-turbo
          version: v0.1 - Fork
          provider: openai
          hyperparameters:
            temperature: 0
            top_p: 1
            max_tokens: 1000
            presence_penalty: 0
            frequency_penalty: 0
            stop: []
            n: 1
          template:
          - role: system
            content: 'Answer the user''s question only using provided context.


              Context: {{ context }}'
          - role: user
            content: '{{question}}'
          type: chat
        children_ids: []
        inputs:
          context: Hello world
          question: What is in the context?
          chat_history:
          - role: system
            content: 'Answer the user''s question only using provided context.


              Context: Hello world'
          - role: user
            content: What is in the context?
        outputs:
          role: assistant
          content: Hello world
        error: null
        start_time: '2024-04-01 22:38:19'
        end_time: '2024-04-01 22:38:19'
        duration: 824.8056
        metadata:
          cost: 8.0e-05
          completion_tokens: 23
          prompt_tokens: 35
          total_tokens: 58
        feedback: {}
        metrics:
          Answer Faithfulness: 5
          Answer Faithfulness_explanation: The AI assistant's answer is a concise
            and accurate description of Ramp's API. It provides a clear explanation
            of what the API does and how developers can use it to integrate Ramp's
            financial services into their own applications. The answer is faithful
            to the provided context.
          Number of words: 18
        user_properties:
          user: google-oauth2|111840237613341303366
    EventFilter:
      type: object
      properties:
        field:
          type: string
          description: The field name that you are filtering by like `metadata.cost`,
            `inputs.chat_history.0.content`
        value:
          type: string
          description: The value that you are filtering the field for
        operator:
          type: string
          enum:
          - is
          - is not
          - contains
          - not contains
          - greater than
          description: The type of filter you are performing - "is", "is not", "contains",
            "not contains", "greater than"
        type:
          type: string
          enum:
          - string
          - number
          - boolean
          - id
          description: The data type you are using - "string", "number", "boolean",
            "id" (for object ids)
      example:
        field: event_type
        operator: is
        value: model
        type: string
    CreateEventRequest:
      type: object
      properties:
        project:
          type: string
          description: Project associated with the event
        source:
          type: string
          description: Source of the event - production, staging, etc
        event_name:
          type: string
          description: Name of the event
        event_type:
          type: string
          enum:
          - model
          - tool
          - chain
          description: Specify whether the event is of "model", "tool" or "chain"
            type
        event_id:
          type: string
          description: Unique id of the event, if not set, it will be auto-generated
        session_id:
          type: string
          description: Unique id of the session associated with the event, if not
            set, it will be auto-generated
        parent_id:
          type: string
          description: Id of the parent event if nested
        children_ids:
          type: array
          items:
            type: string
          description: Id of events that are nested within the event
        config:
          type: object
          additionalProperties: true
          description: Associated configuration JSON for the event - model name, vector
            index name, etc
        inputs:
          type: object
          additionalProperties: true
          description: Input JSON given to the event - prompt, chunks, etc
          properties:
            chat_history:
              type: array
              items:
                type: object
                additionalProperties: true
              description: Messages passed to the model
        outputs:
          type: object
          additionalProperties: true
          description: Final output JSON of the event
        error:
          type: string
          description: Any error description if event failed
        start_time:
          type: number
          description: UTC timestamp (in milliseconds) for the event start
        end_time:
          type: integer
          description: UTC timestamp (in milliseconds) for the event end
        duration:
          type: number
          description: How long the event took in milliseconds
        metadata:
          type: object
          additionalProperties: true
          description: Any system or application metadata associated with the event
        feedback:
          type: object
          additionalProperties: true
          description: Any user feedback provided for the event output
        metrics:
          type: object
          additionalProperties: true
          description: Any values computed over the output of the event
        user_properties:
          type: object
          additionalProperties: true
          description: Any user properties associated with the event
      required:
      - project
      - event_type
      - event_name
      - source
      - config
      - inputs
      - duration
      example:
        project: Simple RAG
        event_type: model
        event_name: Model Completion
        source: playground
        session_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        event_id: 7f22137a-6911-4ed3-bc36-110f1dde6b66
        parent_id: caf77ace-3417-4da4-944d-f4a0688f3c23
        children_ids: []
        config:
          model: gpt-3.5-turbo
          version: v0.1
          provider: openai
          hyperparameters:
            temperature: 0
            top_p: 1
            max_tokens: 1000
            presence_penalty: 0
            frequency_penalty: 0
            stop: []
            n: 1
          template:
          - role: system
            content: 'Answer the user''s question only using provided context.


              Context: {{ context }}'
          - role: user
            content: '{{question}}'
          type: chat
        inputs:
          context: Hello world
          question: What is in the context?
          chat_history:
          - role: system
            content: 'Answer the user''s question only using provided context.


              Context: Hello world'
          - role: user
            content: What is in the context?
        outputs:
          role: assistant
          content: Hello world
        error: null
        start_time: 1714978764301
        end_time: 1714978765301
        duration: 999.8056
        metadata:
          cost: 8.0e-05
          completion_tokens: 23
          prompt_tokens: 35
          total_tokens: 58
        feedback: {}
        metrics:
          Answer Faithfulness: 5
          Answer Faithfulness_explanation: The AI assistant's answer is a concise
            and accurate description of Ramp's API. It provides a clear explanation
            of what the API does and how developers can use it to integrate Ramp's
            financial services into their own applications. The answer is faithful
            to the provided context.
          Number of words: 18
        user_properties:
          user: google-oauth2|111840237613341303366
    Metric:
      type: object
      properties:
        name:
          type: string
          description: Name of the metric
        criteria:
          type: string
          description: Criteria for human metrics
        code_snippet:
          type: string
          description: Associated code block for the metric
        prompt:
          type: string
          description: Evaluator prompt for the metric
        task:
          type: string
          description: Name of the project associated with metric
        type:
          type: string
          enum:
          - custom
          - model
          - human
          description: Type of the metric - "custom", "model" or "human"
        description:
          type: string
          description: Short description of what the metric does
        enabled_in_prod:
          type: boolean
          description: Whether to compute on all production events automatically
        needs_ground_truth:
          type: boolean
          description: Whether a ground truth (on metadata) is required to compute
            it
        return_type:
          type: string
          enum:
          - boolean
          - float
          - string
          description: The data type of the metric value - "boolean", "float", "string"
        threshold:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
          description: Threshold for numeric metrics to decide passing or failing
            in tests
        pass_when:
          type: boolean
          description: Threshold for boolean metrics to decide passing or failing
            in tests
        _id:
          type: string
          description: Unique idenitifier
        event_name:
          type: string
          description: Name of event that the metric is set to be computed on
        event_type:
          type: string
          description: Type of event that the metric is set to be computed on
      required:
      - name
      - task
      - type
      - description
      - return_type
    MetricEdit:
      type: object
      properties:
        metric_id:
          type: string
          description: Unique identifier of the metric
        criteria:
          type: string
          description: Criteria for human metrics
        name:
          type: string
          description: Updated name of the metric
        description:
          type: string
          description: Short description of what the metric does
        code_snippet:
          type: string
          description: Updated code block for the metric
        prompt:
          type: string
          description: Updated Evaluator prompt for the metric
        type:
          type: string
          enum:
          - custom
          - model
          - human
          description: Type of the metric - "custom", "model" or "human"
        enabled_in_prod:
          type: boolean
          description: Whether to compute on all production events automatically
        needs_ground_truth:
          type: boolean
          description: Whether a ground truth (on metadata) is required to compute
            it
        return_type:
          type: string
          enum:
          - boolean
          - float
          - string
          description: The data type of the metric value - "boolean", "float", "string"
        threshold:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
          description: Threshold for numeric metrics to decide passing or failing
            in tests
        pass_when:
          type: boolean
          description: Threshold for boolean metrics to decide passing or failing
            in tests
        event_name:
          type: string
          description: Name of event that the metric is set to be computed on
        event_type:
          type: string
          enum:
          - model
          - tool
          - chain
          - session
          description: Type of event that the metric is set to be computed on
      required:
      - metric_id
    Tool:
      type: object
      properties:
        _id:
          type: string
        task:
          type: string
          description: Name of the project associated with this tool
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties: true
          description: These can be function call params or plugin call params
        tool_type:
          type: string
          enum:
          - function
          - tool
      required:
      - task
      - name
      - parameters
      - tool_type
    CreateToolRequest:
      type: object
      properties:
        task:
          type: string
          description: Name of the project associated with this tool
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties: true
          description: These can be function call params or plugin call params
        type:
          type: string
          enum:
          - function
          - tool
      required:
      - task
      - name
      - parameters
      - type
    UpdateToolRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties: true
      required:
      - id
      - parameters
      - name
    Datapoint:
      type: object
      properties:
        _id:
          type: string
          description: UUID for the datapoint
        tenant:
          type: string
        project_id:
          type: string
          description: UUID for the project where the datapoint is stored
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        inputs:
          type: object
          description: Arbitrary JSON object containing the inputs for the datapoint
        history:
          type: array
          items:
            type: object
          description: Conversation history associated with the datapoint
        ground_truth:
          type: object
          additionalProperties: true
        linked_event:
          type: string
          description: Event id for the event from which the datapoint was created
        linked_evals:
          type: array
          items:
            type: string
          description: Ids of evaluations where the datapoint is included
        linked_datasets:
          type: array
          items:
            type: string
          description: Ids of all datasets that include the datapoint
        saved:
          type: boolean
        type:
          type: string
          description: session or event - specify the type of data
        metadata:
          type: object
          additionalProperties: true
      example:
        _id: 65c13dbbd65fb876b7886cdb
        tenant: org_XiCNIMTZzUKiY2As
        project_id: 653454f3138a956964341c07
        created_at: 2024-02-05 19:57:47.050000
        updated_at: 2024-02-05 19:57:47.050000
        inputs:
          query: what's the temperature in Iceland?
        history:
        - role: system
          content: You are a helpful web assistant that helps users answer questions
            about the world based on the information provided to you by Google's search
            API. Answer the questions as truthfully as you can. In case you are unsure
            about the correct answer, please respond with "I apologize but I'm not
            sure."
        - role: user
          content: "what's the temperature in Iceland?\\n\\n\\n--Google search API\
            \ results below:---\\n\\n\"snippet\":\"2 Week Extended Forecast in Reykjavik,\
            \ Iceland ; Feb 4, 29 / 20 \xB0F \xB7 Snow showers early. Broken clouds.\
            \ ; Feb 5, 27 / 16 \xB0F \xB7 Light snow. Decreasing cloudiness.\",\"\
            snippet_highlighted_words\":[\"Feb 4, 29 / 20 \xB0F\"]"
        ground_truth:
          role: assistant
          content: The temperature in Reykjavik, Iceland is currently around 5F or
            -15C. Please note that weather conditions can change rapidly, so it's
            best to check a reliable source for the most up-to-date information.
        linked_event: 6bba5182-d4b1-4b29-a64a-f0a8bd964f76
        linked_evals: []
        linked_datasets: []
        saved: false
        type: event
        metadata:
          question_type: weather
          completion_tokens: 47
          prompt_tokens: 696
          total_tokens: 743
    CreateDatapointRequest:
      type: object
      properties:
        project:
          type: string
          description: UUID for the project to which the datapoint belongs
        inputs:
          type: object
          additionalProperties: true
          description: Arbitrary JSON object containing the inputs for the datapoint
        history:
          type: array
          description: Conversation history associated with the datapoint
          items:
            type: object
            additionalProperties: true
        ground_truth:
          type: object
          additionalProperties: true
          description: Expected output JSON object for the datapoint
        linked_event:
          type: string
          description: Event id for the event from which the datapoint was created
        linked_datasets:
          type: array
          description: Ids of all datasets that include the datapoint
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
          description: Any additional metadata for the datapoint
      required:
      - project
      - inputs
      example:
        project: 653454f3138a956964341c07
        inputs:
          query: what's the temperature in Iceland?
        history:
        - role: system
          content: You are a helpful web assistant that helps users answer questions
            about the world based on the information provided to you by Google's search
            API. Answer the questions as truthfully as you can. In case you are unsure
            about the correct answer, please respond with "I apologize but I'm not
            sure."
        - role: user
          content: "what's the temperature in Iceland?\\n\\n\\n--Google search API\
            \ results below:---\\n\\n\"snippet\":\"2 Week Extended Forecast in Reykjavik,\
            \ Iceland ; Feb 4, 29 / 20 \xB0F \xB7 Snow showers early. Broken clouds.\
            \ ; Feb 5, 27 / 16 \xB0F \xB7 Light snow. Decreasing cloudiness.\",\"\
            snippet_highlighted_words\":[\"Feb 4, 29 / 20 \xB0F\"]"
        ground_truth:
          role: assistant
          content: The temperature in Reykjavik, Iceland is currently around 5F or
            -15C. Please note that weather conditions can change rapidly, so it's
            best to check a reliable source for the most up-to-date information.
        linked_event: 6bba5182-d4b1-4b29-a64a-f0a8bd964f76
        linked_datasets: []
        metadata:
          question_type: weather
          completion_tokens: 47
          prompt_tokens: 696
          total_tokens: 743
    UpdateDatapointRequest:
      type: object
      properties:
        inputs:
          type: object
          additionalProperties: true
          description: Arbitrary JSON object containing the inputs for the datapoint
        history:
          type: array
          description: Conversation history associated with the datapoint
          items:
            type: object
        ground_truth:
          type: object
          description: Expected output JSON object for the datapoint
          additionalProperties: true
        linked_evals:
          type: array
          description: Ids of evaluations where the datapoint is included
          items:
            type: string
        linked_datasets:
          type: array
          description: Ids of all datasets that include the datapoint
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
          description: Any additional metadata for the datapoint
      example:
        inputs:
          query: what's the temperature in Reykjavik?
        history:
        - role: system
          content: You are a helpful web assistant that helps users answer questions
            about the world based on the information provided to you by Google's search
            API. Answer the questions as truthfully as you can. In case you are unsure
            about the correct answer, please respond with "I apologize but I'm not
            sure."
        - role: user
          content: "what's the temperature in Reykjavik?\\n\\n\\n--Google search API\
            \ results below:---\\n\\n\"snippet\":\"2 Week Extended Forecast in Reykjavik,\
            \ Iceland ; Feb 4, 29 / 20 \xB0F \xB7 Snow showers early. Broken clouds.\
            \ ; Feb 5, 27 / 16 \xB0F \xB7 Light snow. Decreasing cloudiness.\",\"\
            snippet_highlighted_words\":[\"Feb 4, 29 / 20 \xB0F\"]"
        ground_truth:
          role: assistant
          content: The temperature in Reykjavik, Iceland is currently around 5F or
            -15C. Please note that weather conditions can change rapidly, so it's
            best to check a reliable source for the most up-to-date information.
        linked_event: 6bba5182-d4b1-4b29-a64a-f0a8bd964f76
        linked_evals: []
        linked_datasets: []
        metadata:
          question_type: capital-weather
          random_field: 0
    CreateDatasetRequest:
      type: object
      properties:
        project:
          type: string
          description: UUID of the project associated with this dataset like `65e0fc2d6a2eb95f55a92cbc`
        name:
          type: string
          description: Name of the dataset
        description:
          type: string
          description: A description for the dataset
        type:
          type: string
          enum:
          - evaluation
          - fine-tuning
          description: What the dataset is to be used for - "evaluation" (default)
            or "fine-tuning"
        datapoints:
          type: array
          items:
            type: string
          description: List of unique datapoint ids to be included in this dataset
        linked_evals:
          type: array
          items:
            type: string
          description: List of unique evaluation run ids to be associated with this
            dataset
        saved:
          type: boolean
        pipeline_type:
          type: string
          enum:
          - event
          - session
          description: The type of data included in the dataset - "event" (default)
            or "session"
        metadata:
          type: object
          additionalProperties: true
          description: Any helpful metadata to track for the dataset
      required:
      - project
      - name
      example:
        project: 65e0fc2d6a2eb95f55a92cbc
        name: test-dataset
        description: A test dataset
        type: evaluation
        datapoints:
        - 66369748b5773befbdc661e2
        linked_evals: []
        saved: false
        pipeline_type: event
        metadata:
          source: dev
    Dataset:
      type: object
      properties:
        project:
          type: string
          description: UUID of the project associated with this dataset
        name:
          type: string
          description: Name of the dataset
        description:
          type: string
          description: A description for the dataset
        type:
          type: string
          enum:
          - evaluation
          - fine-tuning
          description: What the dataset is to be used for - "evaluation" or "fine-tuning"
        datapoints:
          type: array
          description: List of unique datapoint ids to be included in this dataset
          items:
            type: string
        num_points:
          type: integer
          description: Number of datapoints included in the dataset
        linked_evals:
          type: array
          items:
            type: string
            description: List of unique evaluation run ids associated with this dataset
        saved:
          type: boolean
          description: Whether the dataset has been saved or detected
        pipeline_type:
          type: string
          enum:
          - event
          - session
          description: The type of data included in the dataset - "event" (default)
            or "session"
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the dataset was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the dataset was last updated
      example:
        project: 65e0fc2d6a2eb95f55a92cbc
        name: test-dataset
        description: A test dataset
        type: evaluation
        datapoints:
        - 66369748b5773befbdc661e2
        num_points: 1
        linked_evals: []
        saved: false
        pipeline_type: event
        created_at: 2024-05-04 20:15:04.124000
        updated_at: 2024-05-04 20:15:04.124000
    DatasetUpdate:
      type: object
      properties:
        dataset_id:
          type: string
          description: The unique identifier of the dataset being updated
        name:
          type: string
          description: Updated name for the dataset
        description:
          type: string
          description: Updated description for the dataset
        datapoints:
          type: array
          items:
            type: string
          description: Updated list of datapoint ids for the dataset - note the full
            list is needed
        linked_evals:
          type: array
          items:
            type: string
          description: Updated list of unique evaluation run ids to be associated
            with this dataset
        metadata:
          type: object
          additionalProperties: true
          description: Updated metadata to track for the dataset
      required:
      - dataset_id
      example:
        dataset_id: 663876ec4611c47f4970f0c3
        name: new-dataset-name
        description: An updated dataset description
        datapoints:
        - 66369748b5773befbdc661e
        linked_evals:
        - 66369748b5773befbdasdk1
        metadata:
          updated: true
          source: prod
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
      - name
    UpdateProjectRequest:
      type: object
      properties:
        project_id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - project_id
    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - name
      - description
      - type
    Configuration:
      type: object
      properties:
        _id:
          type: string
          description: ID of the configuration
        project:
          type: string
          description: ID of the project to which this configuration belongs
        name:
          type: string
          description: Name of the configuration
        env:
          type: array
          description: List of environments where the configuration is active
          items:
            type: string
            enum:
            - dev
            - staging
            - prod
        provider:
          type: string
          description: Name of the provider - "openai", "anthropic", etc.
        parameters:
          type: object
          additionalProperties: true
          properties:
            call_type:
              type: string
              enum:
              - chat
              - completion
              description: Type of API calling - "chat" or "completion"
            model:
              type: string
              description: Model unique name
            hyperparameters:
              type: object
              description: Model-specific hyperparameters
              additionalProperties: true
            responseFormat:
              type: object
              description: Response format for the model with the key "type" and value
                "text" or "json_object"
            selectedFunctions:
              type: array
              description: List of functions to be called by the model, refer to OpenAI
                schema for more details
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: UUID of the function
                  name:
                    type: string
                    description: Name of the function
                  description:
                    type: string
                    description: Description of the function
                  parameters:
                    type: object
                    additionalProperties: true
                    description: Parameters for the function
            functionCallParams:
              type: string
              enum:
              - none
              - auto
              - force
              description: Function calling mode - "none", "auto" or "force"
            forceFunction:
              type: object
              additionalProperties: true
              description: Force function-specific parameters
          required:
          - call_type
          - model
        type:
          type: string
          enum:
          - LLM
          - pipeline
          description: Type of the configuration - "LLM" or "pipeline" - "LLM" by
            default
        user_properties:
          type: object
          additionalProperties: true
          description: Details of user who created the configuration
      required:
      - project
      - name
      - provider
      - parameters
      example:
        _id: 6638187d505c6812e4044f24
        project: 660d7ba7995cacccce4d299e
        type:
          type: string
          enum:
          - LLM
          - pipeline
          description: Type of the configuration - "LLM" or "pipeline" - "LLM" by
            default
        name: function-v0
        provider: openai
        parameters:
          call_type: chat
          model: gpt-4-turbo-preview
          hyperparameters:
            temperature: 0
            max_tokens: 1000
            top_p: 1
            top_k: -1
            frequency_penalty: 0
            presence_penalty: 0
            stop_sequences: []
          responseFormat:
            type: text
          selectedFunctions:
          - id: 64e3ba90e81f9b3a3808c27f
            name: get_google_information
            description: Get information from Google when you do not have that information
              in your context
            parameters:
              type: object
              properties:
                query:
                  type: string
                  description: The query asked by the user
              required:
              - query
          functionCallParams: auto
          forceFunction: {}
          template:
          - role: system
            content: You are a web search assistant.
          - role: user
            content: '{{ query }}'
        env:
        - staging
        tags: []
        user_properties:
          user_id: google-oauth2|108897808434934946583
          user_name: Dhruv Singh
          user_picture: https://lh3.googleusercontent.com/a/ACg8ocLyQilNtK9RIv4M0p-0FBSbxljBP0p5JabnStku1AQKtFSK=s96-c
          user_email: dhruv@honeyhive.ai
    PutConfigurationRequest:
      type: object
      properties:
        project:
          type: string
          description: ID of the project to which this configuration belongs
        name:
          type: string
          description: Name of the configuration
        provider:
          type: string
          description: Name of the provider - "openai", "anthropic", etc.
        parameters:
          type: object
          additionalProperties: true
          properties:
            call_type:
              type: string
              enum:
              - chat
              - completion
              description: Type of API calling - "chat" or "completion"
            model:
              type: string
              description: Model unique name
            hyperparameters:
              type: object
              description: Model-specific hyperparameters
              additionalProperties: true
            responseFormat:
              type: object
              description: Response format for the model with the key "type" and value
                "text" or "json_object"
            selectedFunctions:
              type: array
              description: List of functions to be called by the model, refer to OpenAI
                schema for more details
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: UUID of the function
                  name:
                    type: string
                    description: Name of the function
                  description:
                    type: string
                    description: Description of the function
                  parameters:
                    type: object
                    additionalProperties: true
                    description: Parameters for the function
            functionCallParams:
              type: string
              enum:
              - none
              - auto
              - force
              description: Function calling mode - "none", "auto" or "force"
            forceFunction:
              type: object
              additionalProperties: true
              description: Force function-specific parameters
          required:
          - call_type
          - model
        env:
          type: array
          description: List of environments where the configuration is active
          items:
            type: string
            enum:
            - dev
            - staging
            - prod
        type:
          type: string
          enum:
          - LLM
          - pipeline
          description: Type of the configuration - "LLM" or "pipeline" - "LLM" by
            default
        user_properties:
          type: object
          additionalProperties: true
          description: Details of user who created the configuration
      required:
      - project
      - name
      - provider
      - parameters
      example:
        project: 660d7ba7995cacccce4d299e
        name: function-v0
        provider: openai
        parameters:
          call_type: chat
          model: gpt-4-turbo-preview
          hyperparameters:
            temperature: 0
            max_tokens: 1000
            top_p: 1
            top_k: -1
            frequency_penalty: 0
            presence_penalty: 0
            stop_sequences: []
          responseFormat:
            type: text
          selectedFunctions:
          - id: 64e3ba90e81f9b3a3808c27f
            name: get_google_information
            description: Get information from Google when you do not have that information
              in your context
            parameters:
              type: object
              properties:
                query:
                  type: string
                  description: The query asked by the user
              required:
              - query
          functionCallParams: auto
          forceFunction: {}
          template:
          - role: system
            content: You are a web search assistant.
          - role: user
            content: '{{ query }}'
        env:
        - staging
        type: LLM
        tags: []
        user_properties:
          user_id: google-oauth2|108897808434934946583
          user_name: Dhruv Singh
          user_picture: https://lh3.googleusercontent.com/a/ACg8ocLyQilNtK9RIv4M0p-0FBSbxljBP0p5JabnStku1AQKtFSK=s96-c
          user_email: dhruv@honeyhive.ai
    PostConfigurationRequest:
      type: object
      properties:
        project:
          type: string
          description: ID of the project to which this configuration belongs
        name:
          type: string
          description: Name of the configuration
        provider:
          type: string
          description: Name of the provider - "openai", "anthropic", etc.
        parameters:
          type: object
          additionalProperties: true
          properties:
            call_type:
              type: string
              enum:
              - chat
              - completion
              description: Type of API calling - "chat" or "completion"
            model:
              type: string
              description: Model unique name
            hyperparameters:
              type: object
              description: Model-specific hyperparameters
              additionalProperties: true
            responseFormat:
              type: object
              description: Response format for the model with the key "type" and value
                "text" or "json_object"
            selectedFunctions:
              type: array
              description: List of functions to be called by the model, refer to OpenAI
                schema for more details
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: UUID of the function
                  name:
                    type: string
                    description: Name of the function
                  description:
                    type: string
                    description: Description of the function
                  parameters:
                    type: object
                    additionalProperties: true
                    description: Parameters for the function
            functionCallParams:
              type: string
              enum:
              - none
              - auto
              - force
              description: Function calling mode - "none", "auto" or "force"
            forceFunction:
              type: object
              additionalProperties: true
              description: Force function-specific parameters
          required:
          - call_type
          - model
        env:
          type: array
          description: List of environments where the configuration is active
          items:
            type: string
            enum:
            - dev
            - staging
            - prod
        user_properties:
          type: object
          additionalProperties: true
          description: Details of user who created the configuration
      required:
      - project
      - name
      - provider
      - parameters
      example:
        project: 660d7ba7995cacccce4d299e
        name: function-v0
        provider: openai
        parameters:
          call_type: chat
          model: gpt-4-turbo-preview
          hyperparameters:
            temperature: 0
            max_tokens: 1000
            top_p: 1
            top_k: -1
            frequency_penalty: 0
            presence_penalty: 0
            stop_sequences: []
          selectedFunctions:
          - id: 64e3ba90e81f9b3a3808c27f
            name: get_google_information
            description: Get information from Google when you do not have that information
              in your context
            parameters:
              type: object
              properties:
                query:
                  type: string
                  description: The query asked by the user
              required:
              - query
          functionCallParams: auto
          forceFunction: {}
          template:
          - role: system
            content: You are a web search assistant.
          - role: user
            content: '{{ query }}'
        tags: []
        env:
        - staging
        user_properties:
          user_id: google-oauth2|108897808434934946583
          user_name: Dhruv Singh
          user_picture: https://lh3.googleusercontent.com/a/ACg8ocLyQilNtK9RIv4M0p-0FBSbxljBP0p5JabnStku1AQKtFSK=s96-c
          user_email: dhruv@honeyhive.ai
security:
- BearerAuth: []
